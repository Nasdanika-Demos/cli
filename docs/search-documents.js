var searchDocuments = {"http-server/index.html":{"link-uuid":"ed9031c2-a14e-4ace-8b7c-2aa22dc58b5c","title":"http-server","content":"Usage: nsd http-server [-hV] [--[no-]console] [--http-host=&lt;httpHost&gt;] [--http-port=&lt;httpPort&gt;] [--http-server-shutdown-timeout=&lt;timeout&gt;] Serves HTTP routes --[no-]console If true starts a console and waits for exit command, otherwise creates a shutdown hook disposing the server -h, --help Show this help message and exit. --http-host=&lt;httpHost&gt; HTTP host (network interface) to bind to --http-port=&lt;httpPort&gt; HTTP port. If a port is not specified, an ephemeral port is used --http-server-shutdown-timeout=&lt;timeout&gt; Timeout in seconds, defaults to 3 seconds -V, --version Print version information and exit."},"model/html-app/site/index.html":{"path":"model/html-app/site","link-uuid":"5975bc23-39c6-4a12-ae82-eacf1d707d40","title":"site","content":"Version: org.nasdanika.models.app.cli Usage: nsd model html-app site [-hlV] [--progress-console] [--progress-data] [--progress-json] [-b=&lt;baseDir&gt;] [-F=&lt;pageTemplateFile&gt;] [-m=&lt;domian&gt;] [-P=&lt;parallelism&gt;] [--progress-output=&lt;progressOutput&gt;] [-r=&lt;pageErrors&gt;] [-t=&lt;timeout&gt;] [-T=&lt;pageTemplate&gt;] [-w=&lt;workDir&gt;] [-x=&lt;extension&gt;] [-c=&lt;String=String&gt;]... [-C=URL]... [-M=&lt;String=String&gt;]... [-e [=&lt;excludes&gt;...]]... [-i[=&lt;includes&gt;...]]... &lt;output&gt; Generates HTML site &lt;output&gt; Output directory relative to the base directory -b, --base-dir=&lt;baseDir&gt; Base directory -c, --context-entry=&lt;String=String&gt; Context entries. Shadow entries in contexts and mounts. -C, --context=URL Context resource URL relative to the current directory. YAML, JSON, or properties. In properties dots are treated as key path separators. Type is inferred from the content type header, if it is present, or extension. Contexts are composed in the order of definition, later context entries shadowing the former -e, --exclude[=&lt;excludes&gt;...] Output directory clean excludes Ant pattern -F, --page-template-file=&lt;pageTemplateFile&gt; Page template file relative to the current directory -h, --help Show this help message and exit. -i, --include[=&lt;includes&gt;...] Output directory clean includes Ant pattern -l, --[no-]clean Clean working directory defaults to true -m, --domain=&lt;domian&gt; Sitemap domain -M, --context-mount=&lt;String=String&gt; MappingContext resource URL relative to the current directory. YAML, JSON, or properties. In properties dots are treated as key path separators. Type is inferred from the content type header, if it is present, or extension. Mounts shadow context entries. -P, --parallelism=&lt;parallelism&gt; If the value greater than one then an executor service is created and injected into the context to allow concurrent execution. --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -r, --errors=&lt;pageErrors&gt; Expected number of page errors -1 for any (not fail on errors) default is 0 -t, --timeout=&lt;timeout&gt; If parallelism is greater than one this option specifies timout in seconds awaiting completion of execution. Default value is 60. -T, --page-template=&lt;pageTemplate&gt; Page template URI relative to the current directory -V, --version Print version information and exit. -w, --work-dir=&lt;workDir&gt; Working directory -x, --extension=&lt;extension&gt; Extension of files to include in search and site map. Defaults to html Exit codes: Non-negative number Delegate result -1 Unhandled exception during execution -2 Invalid input -3 Diagnostic failed -4 Execution failed or was cancelled, successful rollback -5 Execution failed or was cancelled, rollback failed -6 Executor service termination timed out Example drawio diagram.drawio html-app -r root-action.yml --add-to-root site -r=-1 -F page-template.yml docs Grandparent drawio command loads diagram.drawio diagram resource Parent html-app command generates an html application model from the diagram elements This command: Loads a page template from page-template.yml Generates a documentation site ignoring page errors (-r=-1) Outputs the generated site to the docs directory Options -r, --errors -r=-1 command line option means &ldquo;don&rsquo;t fail on page errors&rdquo; such as: Blank pages Broken internal links Missing resources Missing resources are reported on pages using danger alert blocks. If you want to prevent deployment of a site with page errors, don&rsquo;t use the option or set it to the expected number of errors - there might be &ldquo;known errors&rdquo; which you are OK to live with. -T, --page-template Bootstrap Page to use as a template for site pages. In the page template file you can: Modify the theme - choose one of 20+ Bootswatch themes or the default theme. Please note that generated sites look good with light themes, and not so good (in my personal opinion) with dark themes. Set fluid to true. Modify navigation panel style See Bootstrap Page Load Specification for supported configuration keys. Sample page template in YAML: bootstrap.Page:\n  cdn: true\n  theme: Simplex\n  name: Application Page Template\n  language: EN\n  stylesheets: \n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/css/app.css \n    - https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css\n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/themes/default/style.min.css\n    - https://cdn.jsdelivr.net/npm/github-markdown-css@5.1.0/github-markdown.min.css\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/styles/default.min.css\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.css\n  scripts:\n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/common.js \n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/dark-head.js \n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/jstree.min.js\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/highlight.min.js\n    - https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.min.js\n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/components/table.js\n    - https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\n  body:\n    app.Page:\n      fluid: false\n      navigation-panel:\n        style: SEARCHABLE_TREE # COLLAPSIBLE_CARDS\n        collapsible: true -r, --errors -r=-1 command line option means &ldquo;don&rsquo;t fail on page errors&rdquo; such as: Blank pages Broken internal links Missing resources Missing resources are reported on pages using danger alert blocks. If you want to prevent deployment of a site with page errors, don&rsquo;t use the option or set it to the expected number of errors - there might be &ldquo;known errors&rdquo; which you are OK to live with. -T, --page-template Bootstrap Page to use as a template for site pages. In the page template file you can: Modify the theme - choose one of 20+ Bootswatch themes or the default theme. Please note that generated sites look good with light themes, and not so good (in my personal opinion) with dark themes. Set fluid to true. Modify navigation panel style See Bootstrap Page Load Specification for supported configuration keys. Sample page template in YAML: bootstrap.Page:\n  cdn: true\n  theme: Simplex\n  name: Application Page Template\n  language: EN\n  stylesheets: \n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/css/app.css \n    - https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css\n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/themes/default/style.min.css\n    - https://cdn.jsdelivr.net/npm/github-markdown-css@5.1.0/github-markdown.min.css\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/styles/default.min.css\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.css\n  scripts:\n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/common.js \n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/dark-head.js \n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/jstree.min.js\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/highlight.min.js\n    - https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.min.js\n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/components/table.js\n    - https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\n  body:\n    app.Page:\n      fluid: false\n      navigation-panel:\n        style: SEARCHABLE_TREE # COLLAPSIBLE_CARDS\n        collapsible: true -r=-1 command line option means &ldquo;don&rsquo;t fail on page errors&rdquo; such as: Blank pages Broken internal links Missing resources Missing resources are reported on pages using danger alert blocks. If you want to prevent deployment of a site with page errors, don&rsquo;t use the option or set it to the expected number of errors - there might be &ldquo;known errors&rdquo; which you are OK to live with. Bootstrap Page to use as a template for site pages. In the page template file you can: Modify the theme - choose one of 20+ Bootswatch themes or the default theme. Please note that generated sites look good with light themes, and not so good (in my personal opinion) with dark themes. Set fluid to true. Modify navigation panel style See Bootstrap Page Load Specification for supported configuration keys. Sample page template in YAML: bootstrap.Page:\n  cdn: true\n  theme: Simplex\n  name: Application Page Template\n  language: EN\n  stylesheets: \n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/css/app.css \n    - https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css\n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/themes/default/style.min.css\n    - https://cdn.jsdelivr.net/npm/github-markdown-css@5.1.0/github-markdown.min.css\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/styles/default.min.css\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.css\n  scripts:\n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/common.js \n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/dark-head.js \n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/jstree.min.js\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/highlight.min.js\n    - https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.min.js\n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/components/table.js\n    - https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\n  body:\n    app.Page:\n      fluid: false\n      navigation-panel:\n        style: SEARCHABLE_TREE # COLLAPSIBLE_CARDS\n        collapsible: true"},"list-inspectable-rules/index.html":{"link-uuid":"e9a764d1-7879-43b1-b023-f625f1cc7c9c","title":"list-inspectable-rules","content":"Version: org.nasdanika.launcher.demo Usage: nsd list-inspectable-rules [-hV] [--progress-console] [--progress-data] [--progress-json] [-o=&lt;output&gt;] [--progress-output=&lt;progressOutput&gt;] [--exclude-rule[=&lt;ruleExcludes&gt;...]]... [--exclude-rule-set [=&lt;ruleSetExcludes&gt;...]]... [--include-rule [=&lt;ruleIncludes&gt;...]]... [--include-rule-set [=&lt;ruleSetIncludes&gt;...]]... Lists available rules --exclude-rule[=&lt;ruleExcludes&gt;...] ID's of rules to exclude --exclude-rule-set[=&lt;ruleSetExcludes&gt;...] ID's of rule sets to exclude -h, --help Show this help message and exit. --include-rule[=&lt;ruleIncludes&gt;...] ID's of rules to include --include-rule-set[=&lt;ruleSetIncludes&gt;...] ID's of rule sets to include -o, --output=&lt;output&gt; Output file --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -V, --version Print version information and exit. Options -o, --output Test option documentation -o, --output Test option documentation Test option documentation"},"model/ecore-html-app/site/index.html":{"path":"model/ecore-html-app/site","link-uuid":"94a9a160-c24c-4360-8914-b58692ae5a3d","title":"site","content":"Version: org.nasdanika.models.app.cli Usage: nsd model ecore-html-app site [-hlV] [--progress-console] [--progress-data] [--progress-json] [-b=&lt;baseDir&gt;] [-F=&lt;pageTemplateFile&gt;] [-m=&lt;domian&gt;] [-P=&lt;parallelism&gt;] [--progress-output=&lt;progressOutput&gt;] [-r=&lt;pageErrors&gt;] [-t=&lt;timeout&gt;] [-T=&lt;pageTemplate&gt;] [-w=&lt;workDir&gt;] [-x=&lt;extension&gt;] [-c=&lt;String=String&gt;]... [-C=URL]... [-M=&lt;String=String&gt;]... [-e [=&lt;excludes&gt;...]]... [-i [=&lt;includes&gt;...]]... &lt;output&gt; Generates HTML site &lt;output&gt; Output directory relative to the base directory -b, --base-dir=&lt;baseDir&gt; Base directory -c, --context-entry=&lt;String=String&gt; Context entries. Shadow entries in contexts and mounts. -C, --context=URL Context resource URL relative to the current directory. YAML, JSON, or properties. In properties dots are treated as key path separators. Type is inferred from the content type header, if it is present, or extension. Contexts are composed in the order of definition, later context entries shadowing the former -e, --exclude[=&lt;excludes&gt;...] Output directory clean excludes Ant pattern -F, --page-template-file=&lt;pageTemplateFile&gt; Page template file relative to the current directory -h, --help Show this help message and exit. -i, --include[=&lt;includes&gt;...] Output directory clean includes Ant pattern -l, --[no-]clean Clean working directory defaults to true -m, --domain=&lt;domian&gt; Sitemap domain -M, --context-mount=&lt;String=String&gt; MappingContext resource URL relative to the current directory. YAML, JSON, or properties. In properties dots are treated as key path separators. Type is inferred from the content type header, if it is present, or extension. Mounts shadow context entries. -P, --parallelism=&lt;parallelism&gt; If the value greater than one then an executor service is created and injected into the context to allow concurrent execution. --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -r, --errors=&lt;pageErrors&gt; Expected number of page errors -1 for any (not fail on errors) default is 0 -t, --timeout=&lt;timeout&gt; If parallelism is greater than one this option specifies timout in seconds awaiting completion of execution. Default value is 60. -T, --page-template=&lt;pageTemplate&gt; Page template URI relative to the current directory -V, --version Print version information and exit. -w, --work-dir=&lt;workDir&gt; Working directory -x, --extension=&lt;extension&gt; Extension of files to include in search and site map. Defaults to html Exit codes: Non-negative number Delegate result -1 Unhandled exception during execution -2 Invalid input -3 Diagnostic failed -4 Execution failed or was cancelled, successful rollback -5 Execution failed or was cancelled, rollback failed -6 Executor service termination timed out Example drawio diagram.drawio html-app -r root-action.yml --add-to-root site -r=-1 -F page-template.yml docs Grandparent drawio command loads diagram.drawio diagram resource Parent html-app command generates an html application model from the diagram elements This command: Loads a page template from page-template.yml Generates a documentation site ignoring page errors (-r=-1) Outputs the generated site to the docs directory Options -r, --errors -r=-1 command line option means &ldquo;don&rsquo;t fail on page errors&rdquo; such as: Blank pages Broken internal links Missing resources Missing resources are reported on pages using danger alert blocks. If you want to prevent deployment of a site with page errors, don&rsquo;t use the option or set it to the expected number of errors - there might be &ldquo;known errors&rdquo; which you are OK to live with. -T, --page-template Bootstrap Page to use as a template for site pages. In the page template file you can: Modify the theme - choose one of 20+ Bootswatch themes or the default theme. Please note that generated sites look good with light themes, and not so good (in my personal opinion) with dark themes. Set fluid to true. Modify navigation panel style See Bootstrap Page Load Specification for supported configuration keys. Sample page template in YAML: bootstrap.Page:\n  cdn: true\n  theme: Simplex\n  name: Application Page Template\n  language: EN\n  stylesheets: \n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/css/app.css \n    - https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css\n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/themes/default/style.min.css\n    - https://cdn.jsdelivr.net/npm/github-markdown-css@5.1.0/github-markdown.min.css\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/styles/default.min.css\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.css\n  scripts:\n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/common.js \n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/dark-head.js \n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/jstree.min.js\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/highlight.min.js\n    - https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.min.js\n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/components/table.js\n    - https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\n  body:\n    app.Page:\n      fluid: false\n      navigation-panel:\n        style: SEARCHABLE_TREE # COLLAPSIBLE_CARDS\n        collapsible: true -r, --errors -r=-1 command line option means &ldquo;don&rsquo;t fail on page errors&rdquo; such as: Blank pages Broken internal links Missing resources Missing resources are reported on pages using danger alert blocks. If you want to prevent deployment of a site with page errors, don&rsquo;t use the option or set it to the expected number of errors - there might be &ldquo;known errors&rdquo; which you are OK to live with. -T, --page-template Bootstrap Page to use as a template for site pages. In the page template file you can: Modify the theme - choose one of 20+ Bootswatch themes or the default theme. Please note that generated sites look good with light themes, and not so good (in my personal opinion) with dark themes. Set fluid to true. Modify navigation panel style See Bootstrap Page Load Specification for supported configuration keys. Sample page template in YAML: bootstrap.Page:\n  cdn: true\n  theme: Simplex\n  name: Application Page Template\n  language: EN\n  stylesheets: \n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/css/app.css \n    - https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css\n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/themes/default/style.min.css\n    - https://cdn.jsdelivr.net/npm/github-markdown-css@5.1.0/github-markdown.min.css\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/styles/default.min.css\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.css\n  scripts:\n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/common.js \n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/dark-head.js \n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/jstree.min.js\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/highlight.min.js\n    - https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.min.js\n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/components/table.js\n    - https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\n  body:\n    app.Page:\n      fluid: false\n      navigation-panel:\n        style: SEARCHABLE_TREE # COLLAPSIBLE_CARDS\n        collapsible: true -r=-1 command line option means &ldquo;don&rsquo;t fail on page errors&rdquo; such as: Blank pages Broken internal links Missing resources Missing resources are reported on pages using danger alert blocks. If you want to prevent deployment of a site with page errors, don&rsquo;t use the option or set it to the expected number of errors - there might be &ldquo;known errors&rdquo; which you are OK to live with. Bootstrap Page to use as a template for site pages. In the page template file you can: Modify the theme - choose one of 20+ Bootswatch themes or the default theme. Please note that generated sites look good with light themes, and not so good (in my personal opinion) with dark themes. Set fluid to true. Modify navigation panel style See Bootstrap Page Load Specification for supported configuration keys. Sample page template in YAML: bootstrap.Page:\n  cdn: true\n  theme: Simplex\n  name: Application Page Template\n  language: EN\n  stylesheets: \n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/css/app.css \n    - https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css\n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/themes/default/style.min.css\n    - https://cdn.jsdelivr.net/npm/github-markdown-css@5.1.0/github-markdown.min.css\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/styles/default.min.css\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.css\n  scripts:\n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/common.js \n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/dark-head.js \n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/jstree.min.js\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/highlight.min.js\n    - https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.min.js\n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/components/table.js\n    - https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\n  body:\n    app.Page:\n      fluid: false\n      navigation-panel:\n        style: SEARCHABLE_TREE # COLLAPSIBLE_CARDS\n        collapsible: true"},"drawio/invoke/index.html":{"path":"drawio/invoke","link-uuid":"6770e39d-66b2-40f1-a919-99e8ac833ce0","title":"invoke","content":"Version: org.nasdanika.cli Usage: nsd drawio invoke [-hV] [--progress-console] [--progress-data] [--progress-json] [-b=&lt;bindProperty&gt;] [-c=&lt;connectionBase&gt;] [-p=&lt;processorProperty&gt;] [--progress-output=&lt;progressOutput&gt;] [&lt;parameters&gt;...] Creates an Invocable dynamic proxy from a diagram calls it with command parameters and returns result [&lt;parameters&gt;...] Invocable parameters -b, --bind-property=&lt;bindProperty&gt; Bind property Defaults to bind -c, --connection-base=&lt;connectionBase&gt; Connection base Valid values: PARENT, SOURCE, TARGET -h, --help Show this help message and exit. -p, --processor-property=&lt;processorProperty&gt; Processor property Defaults to processor --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -V, --version Print version information and exit. Examples Class path resource Maven resource GitLab TODO - factory in demo, snippet here. Contributing sub-commands To contribute a sub-command: Add @ParentCommands(Document.Supplier.class) annotation to your command class Declare a field of type Document.Supplier and annotate it with @ParentCommand. You may declare a setter method instead. Use the field value to obtain an instance of Document. as shown in the code snippet below: import org.nasdanika.cli.ParentCommands;\nimport org.nasdanika.common.ProgressMonitor;\nimport org.nasdanika.drawio.Document;\n\nimport picocli.CommandLine.Command;\nimport picocli.CommandLine.ParentCommand;\n\n@Command(...)\n@ParentCommands(Document.Supplier.class)\npublic class MyCommand {\n    \n    @ParentCommand\n    private Document.Supplier documentSupplier;\n\n    public void myMethod(ProgressMonitor progressMonitor) {\n        Document document = documentSupplier.getDocument(progressMonitor); \n        ...\n    }       \n\n}\n Executable diagrams sub-commands"},"gitlab/contribute/retrospect/demo/index.html":{"path":"gitlab/contribute/retrospect/demo","link-uuid":"f137fa22-ddf0-4c81-974c-a8716f40f2e8","title":"demo","content":"Usage: nsd gitlab contribute retrospect demo [-hV] Demo retrospect command -h, --help Show this help message and exit. -V, --version Print version information and exit."},"rules/list/index.html":{"path":"rules/list","link-uuid":"cf14e1ee-1985-40bd-940d-ffb68176d79e","title":"list","content":"Usage: nsd rules list [-hrV] [--progress-console] [--progress-data] [--progress-json] [-o=&lt;output&gt;] [--progress-output=&lt;progressOutput&gt;] [--exclude-rule [=&lt;ruleExcludes&gt;...]]... [--exclude-rule-set [=&lt;ruleSetExcludes&gt;...]]... [--include-rule [=&lt;ruleIncludes&gt;...]]... [--include-rule-set [=&lt;ruleSetIncludes&gt;...]]... Lists available rule sets and rules --exclude-rule[=&lt;ruleExcludes&gt;...] ID's of rules to exclude --exclude-rule-set[=&lt;ruleSetExcludes&gt;...] ID's of rule sets to exclude -h, --help Show this help message and exit. --include-rule[=&lt;ruleIncludes&gt;...] ID's of rules to include --include-rule-set[=&lt;ruleSetIncludes&gt;...] ID's of rule sets to include -o, --output=&lt;output&gt; Output file --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -r, --[no-]rules Output rules -V, --version Print version information and exit."},"model/save/index.html":{"path":"model/save","link-uuid":"1054e21f-8110-4f2b-8e76-5d5a78b67ac7","title":"save","content":"Version: org.nasdanika.cli Usage: nsd model save [-hV] [--progress-console] [--progress-data] [--progress-json] [--progress-output=&lt;progressOutput&gt;] [--content-type-resource-factory=&lt;String=Class&gt;]... [--extension-resource-factory=&lt;String=Class&gt;]... [--protocol-resource-factory=&lt;String=Class&gt;]... &lt;output&gt; Saves model to a file &lt;output&gt; Output file --content-type-resource-factory=&lt;String=Class&gt; Maps content type to resource factory class --extension-resource-factory=&lt;String=Class&gt; Maps extension to resource factory class -h, --help Show this help message and exit. --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor --protocol-resource-factory=&lt;String=Class&gt; Maps protocol to resource factory class -V, --version Print version information and exit."},"gitlab/contribute/retrospect/demo-analyze/index.html":{"path":"gitlab/contribute/retrospect/demo-analyze","link-uuid":"3f9fa6c6-2283-470a-93a7-29151713522d","title":"demo-analyze","content":"Usage: nsd gitlab contribute retrospect demo-analyze [-hV] [--progress-console] [--progress-data] [--progress-json] [-p=&lt;pom&gt;] [--progress-output=&lt;progressOutput&gt;] Demo source analysis command -h, --help Show this help message and exit. -p, --pom=&lt;pom&gt; Pom file, defaults to pom.xml --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -V, --version Print version information and exit."},"launcher/index.html":{"link-uuid":"fce8aa2a-874b-4db1-965e-2695f2286c70","title":"launcher","content":"Version: org.nasdanika.cli Usage: nsd launcher [-hstvV] [-a=&lt;args&gt;] [--add-modules=&lt;addModules&gt;] [-b=&lt;base&gt;] [-c=&lt;className&gt;] [-C=&lt;classPathModules&gt;] [-f=&lt;optionsFile&gt;] [-j=&lt;javaCommand&gt;] [-m=&lt;moduleName&gt;] [-M=&lt;modulesFile&gt;] [-o=&lt;output&gt;] [-p=&lt;pathSeparator&gt;] [-P=&lt;prefix&gt;] [-r=&lt;rootModules&gt;] [&lt;repositories&gt;...] Generates Java command line from directories of modules/jars [&lt;repositories&gt;...] Directories to scan for modules, defaults to lib -a, --args=&lt;args&gt; Arguments, defaults to %* --add-modules=&lt;addModules&gt; Comma-separated list of modules to add to Java command --add-modules Computed if not specified -b, --base=&lt;base&gt; Base repositories directory -c, --class=&lt;className&gt; Application class, defaults to org.nasdanika.cli.Application -C, --claspath-modules=&lt;classPathModules&gt; Comma-separated list of classpath modules -f, --options-file=&lt;optionsFile&gt; File to output options to -h, --help Show this help message and exit. -j, --java=&lt;javaCommand&gt; Java command, defaults to java -m, --module=&lt;moduleName&gt; Application module, defaults to org.nasdanika.cli -M, --modules=&lt;modulesFile&gt; Modules to add to the module path -o, --output=&lt;output&gt; Output file -p, --path-separator=&lt;pathSeparator&gt; Path separator, defaults to the system path separator -P, --prefix=&lt;prefix&gt; Module path prefix -r, --root-modules=&lt;rootModules&gt; Comma-separated list of root modules Supports .* and .** patterns -s, --absolute Use absolute paths -t, --options Output only options -v, --verbose Output debug information -V, --version Print version information and exit."},"drawio/index.html":{"link-uuid":"eab85c6b-0100-417a-886c-6d3a249e2d44","title":"drawio","content":"Version: org.nasdanika.cli Usage: nsd drawio [-fhV] [-b=&lt;baseUri&gt;] [-p=&lt;String=String&gt;]... [-P=URL]... [-u=&lt;String=String&gt;]... [-U=URL of URI to URL mapping resource]... &lt;document&gt; [COMMAND] Loads Drawio document from a URI or file &lt;document&gt; Document URI or file path, resolved relative to the current directory -b, --base-url=&lt;baseUri&gt; Base URI for reolving document and target URIs. Defaults to the current directory URI Resolved relative to the current directory URI -f, --file Document parameter is a file path -h, --help Show this help message and exit. -p, --property=&lt;String=String&gt; Property -P, --properties=URL Properties resource URL relative to the current directory. YAML, JSON, or properties. Type is inferred from the content type header, if it is present, or extension. Properties are loaded in the order of definition, later properties replacing the former -u, --uri=&lt;String=String&gt; URI mapping. Target URIs are resolved relative to the base URI -U, --uris=URL of URI to URL mapping resource URI map resource URL relative to the document file YAML, JSON, or properties Type is inferred from the content type header, if it is present, or extension -V, --version Print version information and exit. Commands: html-app - Generates html application model from a drawio document http-server - Routes HTTP requests to a diagram element processor invoke - Creates an Invocable dynamic proxy from a diagram Examples drawio test-data/jira/diagram.drawio html-app -r test-data/jira/root-action.yml --add-to-root site -r=-1 -F test-data/jira/page-template.yml test-data/jira/docs Loads test-data/drawio-http/diagram.drawio diagram resource Executes html-app sub-command and its site sub-command to generate a documentation site drawio test-data/drawio-http/diagram.drawio http-server --http-port=8080 processor route Loads test-data/drawio-http/diagram.drawio diagram resource Executes http-server sub-command which serves diagram element routes at port 8080 drawio -p my-property=&quot;My property&quot; test-data/invocable.drawio invoke 33 66 Sets property my-property to My property Loads test-data/invocable.drawio diagram document Executes invoke sub-command with 33 and 66 arguments URI Handlers The command loads URI Handlers using the capability framework. You can load resources from Maven with the Maven URI Handler. You can also create and register a custom URI handler, for example GitLabURIHandler to load diagram resources from GitLab. Below is an example of a capability factory: \nimport org.eclipse.emf.ecore.resource.URIConverter;\nimport org.eclipse.emf.ecore.resource.URIHandler;\nimport org.nasdanika.capability.emf.URIConverterContributorCapabilityFactory;\nimport org.nasdanika.common.ProgressMonitor;\n\n/**\n * Contributes {@link URIHandler} loading from Maven repositories\n */\npublic class MavenURIHandlerCapabilityFactory extends URIConverterContributorCapabilityFactory {\n\n    @Override\n    protected void contribute(\n            URIConverter uriConverter, \n            Loader loader,\n            ProgressMonitor progressMonitor) {  \n        uriConverter.getURIHandlers().add(0, new MavenURIHandler(loader.getCapabilityLoader(), progressMonitor));\n        \n    }\n    \n}\n Contributing sub-commands To contribute a sub-command: Add @ParentCommands(Document.Supplier.class) annotation to your command class Declare a field of type Document.Supplier and annotate it with @ParentCommand. You may declare a setter method instead. Use the field value to obtain an instance of Document. as shown in the code snippet below: import org.nasdanika.cli.ParentCommands;\nimport org.nasdanika.common.ProgressMonitor;\nimport org.nasdanika.drawio.Document;\n\nimport picocli.CommandLine.Command;\nimport picocli.CommandLine.ParentCommand;\n\n@Command(...)\n@ParentCommands(Document.Supplier.class)\npublic class MyCommand {\n    \n    @ParentCommand\n    private Document.Supplier documentSupplier;\n\n    public void myMethod(ProgressMonitor progressMonitor) {\n        Document document = documentSupplier.getDocument(progressMonitor); \n        ...\n    }       \n\n}\n Below is a factory: import java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.CompletionStage;\n\nimport org.nasdanika.common.ProgressMonitor;\n\nimport picocli.CommandLine;\n\npublic class MyCommanddFactory extends SubCommandCapabilityFactory&lt;MyCommand&gt; {\n\n    @Override\n    protected Class&lt;MyCommand&gt; getCommandType() {\n        return MyCommand.class;\n    }\n    \n    @Override\n    protected CompletionStage&lt;MyCommand&gt; doCreateCommand(\n            List&lt;CommandLine&gt; parentPath,\n            Loader loader,\n            ProgressMonitor progressMonitor) {\n        return CompletableFuture.completedStage(new MyCommand(loader.getCapabilityLoader()));\n    }\n\n}\n The factory shall be registered as a CapabilityFactory provider in module-info.java: import org.nasdanika.capability.CapabilityFactory;\n\nmodule &lt;module name&gt; {\n\n    ...    \n    \n    opens &lt;package with commands&gt;; // For reflection and documentation resource loading\n    \n    provides CapabilityFactory with MyCommandFactory;\n    \n}\n Executable diagrams sub-commands You can create sub-commands which execute diagrams by extending AbstractElementInvocableCommand. invoke is an example of such a command. General purpose executable graphs and diagrams Medium story explains how to create diagram element processors."},"gitlab/invoke/index.html":{"path":"gitlab/invoke","link-uuid":"c24c80c6-0508-4e60-ae18-7ea852f28dae","title":"invoke","content":"Version: org.nasdanika.cli Usage: nsd gitlab invoke [-fhV] [--progress-console] [--progress-data] [--progress-json] [--progress-output=&lt;progressOutput&gt;] [-p=&lt;String=String&gt;]... [-P=URL]... &lt;uri&gt; [&lt;bindings&gt;...] Invokes URI &lt;uri&gt; URI to invoke [&lt;bindings&gt;...] Bindings URIs -f, --file URI parameter is a file path -h, --help Show this help message and exit. -p, --property=&lt;String=String&gt; Property -P, --properties=URL Properties resource URL relative to the current directory. YAML, JSON, or properties. Type is inferred from the content type header, if it is present, or extension. Properties are loaded in the order of definition, later properties replacing the former --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -V, --version Print version information and exit. Loads an invocable from a URI as explained in Loading Invocables from URIs and then invokes it with arguments obtained from parameters invocable URIs."},"rules/site/index.html":{"path":"rules/site","link-uuid":"7a165322-5940-4a97-b5ed-d3b55c38a63e","title":"site","content":"Usage: nsd rules site [-fhlRV] [--progress-console] [--progress-data] [--progress-json] [-b=&lt;baseDir&gt;] [-m=&lt;domian&gt;] [-P=&lt;parallelism&gt;] [--progress-output=&lt;progressOutput&gt;] [-r=&lt;pageErrors&gt;] [--root-action-icon=&lt;rootActionIcon&gt;] [--root-action-location=&lt;rootActionLocation&gt;] [--root-action-text=&lt;rootActionText&gt;] [-t=&lt;timeout&gt;] [-T=&lt;pageTemplate&gt;] [-w=&lt;workDir&gt;] [-c=&lt;String=String&gt;]... [-C=URL]... [-M=&lt;String=String&gt;]... [-e[=&lt;excludes&gt;...]]... [-i [=&lt;includes&gt;...]]... &lt;model&gt; &lt;output&gt; Generates rule set documentation site &lt;model&gt; Model URI, resolved relative to the current directory or looked up in registered rule sets if -R option is provided &lt;output&gt; Output directory -b, --base-dir=&lt;baseDir&gt; Base directory -c, --context-entry=&lt;String=String&gt; Context entries. Shadow entries in contexts and mounts. -C, --context=URL Context resource URL relative to the current directory. YAML, JSON, or properties. In properties dots are treated as key path separators. Type is inferred from the content type header, if it is present, or extension. Contexts are composed in the order of definition, later context entries shadowing the former -e, --exclude[=&lt;excludes&gt;...] Output directory clean excludes Ant pattern -f, --file Mdel parameter is a file path -h, --help Show this help message and exit. -i, --include[=&lt;includes&gt;...] Output directory clean includes Ant pattern -l, --[no-]clean Clean working directory defaults to true -m, --domain=&lt;domian&gt; Sitemap domain -M, --context-mount=&lt;String=String&gt; MappingContext resource URL relative to the current directory. YAML, JSON, or properties. In properties dots are treated as key path separators. Type is inferred from the content type header, if it is present, or extension. Mounts shadow context entries. -P, --parallelism=&lt;parallelism&gt; If the value greater than one then an executor service is created and injected into the context to allow concurrent execution. --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -r, --errors=&lt;pageErrors&gt; Expected number of page errors -1 for any (not fail on errors) default is 0 -R, --registered Use registered rule set with provided URI --root-action-icon=&lt;rootActionIcon&gt; Root action icon --root-action-location=&lt;rootActionLocation&gt; Root action location --root-action-text=&lt;rootActionText&gt; Root action text -t, --timeout=&lt;timeout&gt; If parallelism is greater than one this option specifies timout in seconds awaiting completion of execution. Default value is 60. -T, --page-template=&lt;pageTemplate&gt; Page template URI relative to the current directory -V, --version Print version information and exit. -w, --work-dir=&lt;workDir&gt; Working directory Exit codes: Non-negative number Delegate result -1 Unhandled exception during execution -2 Invalid input -3 Diagnostic failed -4 Execution failed or was cancelled, successful rollback -5 Execution failed or was cancelled, rollback failed -6 Executor service termination timed out"},"model/html-app/save/index.html":{"path":"model/html-app/save","link-uuid":"79b808c5-688f-4cb7-9c85-4026c38d9a48","title":"save","content":"Version: org.nasdanika.cli Usage: nsd model html-app save [-hV] [--progress-console] [--progress-data] [--progress-json] [--progress-output=&lt;progressOutput&gt;] [--content-type-resource-factory=&lt;String=Class&gt;]. .. [--extension-resource-factory=&lt;String=Class&gt;]... [--protocol-resource-factory=&lt;String=Class&gt;]... &lt;output&gt; Saves model to a file &lt;output&gt; Output file --content-type-resource-factory=&lt;String=Class&gt; Maps content type to resource factory class --extension-resource-factory=&lt;String=Class&gt; Maps extension to resource factory class -h, --help Show this help message and exit. --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor --protocol-resource-factory=&lt;String=Class&gt; Maps protocol to resource factory class -V, --version Print version information and exit."},"app/index.html":{"link-uuid":"9c7c1de5-e67c-4a2f-8558-4150c13b6bb5","title":"app","content":"Version: org.nasdanika.models.app.cli Usage: nsd app [-hV] [COMMAND] HTML Application model commands -h, --help Show this help message and exit. -V, --version Print version information and exit. Commands: site - Generates HTML site"},"index.html":{"link-uuid":"8f2d3c3c-f05f-444d-bb55-28774ecbafc7","title":"nsd","content":"Version: org.nasdanika.cli Usage: nsd [-hV] COMMAND Nasdanika Command Line Interface -h, --help Show this help message and exit. -V, --version Print version information and exit. Commands: launcher - Generates Java command line from directories of modules/jars app - HTML Application model commands drawio - Loads Drawio document from a URI or file gitlab - Commands for working with GitLab gsh - Groovy Shell help - Outputs usage for all registred commands http-server - Serves HTTP routes inspect-yaml - Demo of YAML inspection invoke - Invokes URI java - Commands related to Java list-inspectable-rules - Lists available rules list-rules - Lists available rules model - Loads EObject from a URI or file module-graph - Generates module dependency graph rules - Rules commands shell - Starts an interactive shell exit - Exits shell"},"gitlab/contribute/index.html":{"path":"gitlab/contribute","link-uuid":"32682f1d-3eb0-4b10-95df-16a2895ae81e","title":"contribute","content":"Usage: nsd gitlab contribute [-hV] [-a=&lt;String=String&gt;]... (&lt;authorEmail&gt; &lt;authorName&gt; [-m=&lt;commitMessage&gt;] [-b=&lt;branch&gt;] [-f] [-s]) [[-t=&lt;targetBranch&gt;] [--[no-] allow-collaboration] [--approvals-before-merge=&lt;approvalsBeforeMerge&gt;] [--assignee=&lt;Assignee ID&gt;]... [--merge-request-description=&lt;description&gt;] [-- [no-]discussion-locked] [--label=&lt;labels&gt;]... [--milestone=&lt;milestoneId&gt;] [--[no-] remove-source-branch] [--reviewer=&lt;Reviewer ID&gt;]... [--[no-]squash] [--merge-request-title=&lt;title&gt;] [--state-event=&lt;stateEvent&gt;]] [COMMAND] Parent for sub-command contributing via GitLabURIHandler -a, --alias=&lt;String=String&gt; Map project alias (key) to project ID or path (value) -h, --help Show this help message and exit. -V, --version Print version information and exit. Commit &lt;authorEmail&gt; Commit author eMail &lt;authorName&gt; Commit author name -b, --branch=&lt;branch&gt; Branch to commit to -f, --force Force commit -m, --commit-message=&lt;commitMessage&gt; Commit message -s, --stats With stats Merge request --[no-]allow-collaboration --approvals-before-merge=&lt;approvalsBeforeMerge&gt; Number of approvals before merge --assignee=&lt;Assignee ID&gt; Assignee ID --[no-]discussion-locked --label=&lt;labels&gt; --merge-request-description=&lt;description&gt; --merge-request-title=&lt;title&gt; --milestone=&lt;milestoneId&gt; Milestone ID --[no-]remove-source-branch --reviewer=&lt;Reviewer ID&gt; Reviewer ID --[no-]squash --state-event=&lt;stateEvent&gt; Valid values: close, reopen -t, --target-branch=&lt;targetBranch&gt; Target branch, defaults to the original branch Commands: gsh - Groovy Shell invoke - Invokes URI junit - Generates JUnit tests retrospect - Parent for sub-commands contributing based on history"},"java/junit/jacoco/index.html":{"path":"java/junit/jacoco","link-uuid":"37ee3076-5f8f-4d67-ba97-6a81d6bb547c","title":"jacoco","content":"Usage: nsd java junit jacoco [-hV] [-c=&lt;classes&gt;] [-j=&lt;jacoco&gt;] [-m=&lt;moduleName&gt;] Loads coverage from jacoco.exec and classes directory -c, --classes=&lt;classes&gt; Classes directory path relative to the project directory, defaults to target/classes -h, --help Show this help message and exit. -j, --jacoco=&lt;jacoco&gt; jacoco.exec file path relative to the project directory, defaults to target/jacoco.exec -m, --module=&lt;moduleName&gt; Coverage module name -V, --version Print version information and exit."},"gitlab/contribute/retrospect/index.html":{"path":"gitlab/contribute/retrospect","link-uuid":"833a987c-bbbc-4ba0-b547-19f29fd56bf0","title":"retrospect","content":"Usage: nsd gitlab contribute retrospect [-hV] [--ref=&lt;ref&gt;] [--since=&lt;since&gt;] [--until=&lt;until&gt;] [--path=&lt;paths&gt;]... &lt;project&gt; [COMMAND] Parent for sub-commands contributing based on history &lt;project&gt; Project ID or path -h, --help Show this help message and exit. --path=&lt;paths&gt; Paths of interest --ref=&lt;ref&gt; Reference - branch, tag, or commit --since=&lt;since&gt; Since date in ISO8601 format yyyy-MM-dd'T'HH:mm:ssZ --until=&lt;until&gt; Since date in ISO8601 format yyyy-MM-dd'T'HH:mm:ssZ -V, --version Print version information and exit. Commands: demo - Demo retrospect command demo-analyze - Demo source analysis command gsh - Groovy Shell invoke - Invokes URI"},"drawio/html-app/index.html":{"path":"drawio/html-app","link-uuid":"7587df51-5070-4b01-8ef5-ec67845cfb34","title":"html-app","content":"Version: org.nasdanika.models.app.cli Usage: nsd drawio html-app [-fhRV] [-b=&lt;base&gt;] [-P=&lt;insertionIndex&gt;] [-r=&lt;rootLabel&gt;] [-x=&lt;indexName&gt;] [--content-type-resource-factory=&lt;String=Class&gt;]... [--extension-resource-factory=&lt;String=Class&gt;]... [-F=Invocable URI]... [--protocol-resource-factory=&lt;String=Class&gt;]... [COMMAND] Generates html application model from a drawio document -b, --base-uri=&lt;base&gt; Base URI. E.g. 'pages/' --content-type-resource-factory=&lt;String=Class&gt; Maps content type to resource factory class --extension-resource-factory=&lt;String=Class&gt; Maps extension to resource factory class -f, --file Root label option is a file path -F, --representation-element-filter=Invocable URI Invocable URI of a representation element filter URIs are resolved relative to the current directory -h, --help Show this help message and exit. -P, --position=&lt;insertionIndex&gt; Insertion position Defaults to 0 --protocol-resource-factory=&lt;String=Class&gt; Maps protocol to resource factory class -r, --root-label=&lt;rootLabel&gt; Root label URL or file path, resolved relative to the current directory -R, --add-to-root Add labels to the root even if the principal is present -V, --version Print version information and exit. -x, --index=&lt;indexName&gt; Index file name, defaults to index.html Commands: save - Saves model to a file site - Generates HTML site Example drawio diagram.drawio html-app -r root-action.yml --add-to-root site -r=-1 -F page-template.yml docs Parent drawio command loads diagram.drawio diagram resource This command: Generates an html application model from the diagram elements Loads a root action from root-action.yml resource Adds the generated labels to the root action Passes the resulting model to the site sub-command to generate a documentation site Options -F, --representation-element-filter Invocable URI returning an instance of RepresentationElementFilter. Groovy example - bob-decorator.groovy from Bob The Builder demo adds a border to the Bob icon: import org.nasdanika.models.app.graph.drawio.RepresentationElementFilter;\nimport org.nasdanika.common.ProgressMonitor;\nimport org.nasdanika.drawio.Element;\nimport org.nasdanika.drawio.ModelElement;\nimport org.nasdanika.graph.processor.ProcessorInfo;\nimport org.nasdanika.models.app.graph.WidgetFactory;\nimport org.nasdanika.capability.CapabilityFactory.Loader\n\n// Script arguments for reference\nLoader loader = args[0];\nProgressMonitor loaderProgressMonitor = args[1];\nObject data = args[2]; // From fragment\n\nnew RepresentationElementFilter() {\n\n    @Override\n    void filterRepresentationElement(\n            ModelElement sourceElement, \n            ModelElement representationElement,\n            Map&lt;Element, ProcessorInfo&lt;WidgetFactory&gt;&gt; registry, ProgressMonitor progressMonitor) {\n\n        if (&quot;Bob&quot;.equals(representationElement.getLabel())) {\n            representationElement.style(&quot;imageBorder&quot;, &quot;default&quot;);\n        }\n    }\n    \n}\n -r, --root-label Label or its subclass, e.g. Action to use as the root of the HTML Application model. If specified, labels generated from the diagram are added to the principal action, which is the first child of the root label, if it is present. If the principal action is not present or -R, --add-to-root option is set, then the generated labels are added to the root label as children. Example Below is a YAML definition of a root action. Action:\n    icon: https://docs.nasdanika.org/images/nasdanika-logo.png\n    text: Nasdanika Templates\n    location: https://github.com/Nasdanika-Templates\n    children:\n      - Action:\n          location: ${base-uri}search.html\n          icon: fas fa-search\n          text: Search\n          content:\n            Interpolator:\n              source:\n                exec.content.Resource: classpath://org/nasdanika/models/app/gen/search.html\n      - Action:\n          location: ${base-uri}glossary.html\n          text: Glossary\n          content:\n            Interpolator:\n              source:\n                exec.content.Resource: classpath://org/nasdanika/models/app/gen/semantic-info.html\n    navigation:\n      - Action:\n          text: Source\n          icon: fab fa-github\n          location: https://github.com/Nasdanika-Templates/drawio-site  \n See Action Load Specification for supported configuration keys. -F, --representation-element-filter Invocable URI returning an instance of RepresentationElementFilter. Groovy example - bob-decorator.groovy from Bob The Builder demo adds a border to the Bob icon: import org.nasdanika.models.app.graph.drawio.RepresentationElementFilter;\nimport org.nasdanika.common.ProgressMonitor;\nimport org.nasdanika.drawio.Element;\nimport org.nasdanika.drawio.ModelElement;\nimport org.nasdanika.graph.processor.ProcessorInfo;\nimport org.nasdanika.models.app.graph.WidgetFactory;\nimport org.nasdanika.capability.CapabilityFactory.Loader\n\n// Script arguments for reference\nLoader loader = args[0];\nProgressMonitor loaderProgressMonitor = args[1];\nObject data = args[2]; // From fragment\n\nnew RepresentationElementFilter() {\n\n    @Override\n    void filterRepresentationElement(\n            ModelElement sourceElement, \n            ModelElement representationElement,\n            Map&lt;Element, ProcessorInfo&lt;WidgetFactory&gt;&gt; registry, ProgressMonitor progressMonitor) {\n\n        if (&quot;Bob&quot;.equals(representationElement.getLabel())) {\n            representationElement.style(&quot;imageBorder&quot;, &quot;default&quot;);\n        }\n    }\n    \n}\n -r, --root-label Label or its subclass, e.g. Action to use as the root of the HTML Application model. If specified, labels generated from the diagram are added to the principal action, which is the first child of the root label, if it is present. If the principal action is not present or -R, --add-to-root option is set, then the generated labels are added to the root label as children. Example Below is a YAML definition of a root action. Action:\n    icon: https://docs.nasdanika.org/images/nasdanika-logo.png\n    text: Nasdanika Templates\n    location: https://github.com/Nasdanika-Templates\n    children:\n      - Action:\n          location: ${base-uri}search.html\n          icon: fas fa-search\n          text: Search\n          content:\n            Interpolator:\n              source:\n                exec.content.Resource: classpath://org/nasdanika/models/app/gen/search.html\n      - Action:\n          location: ${base-uri}glossary.html\n          text: Glossary\n          content:\n            Interpolator:\n              source:\n                exec.content.Resource: classpath://org/nasdanika/models/app/gen/semantic-info.html\n    navigation:\n      - Action:\n          text: Source\n          icon: fab fa-github\n          location: https://github.com/Nasdanika-Templates/drawio-site  \n See Action Load Specification for supported configuration keys. Invocable URI returning an instance of RepresentationElementFilter. Groovy example - bob-decorator.groovy from Bob The Builder demo adds a border to the Bob icon: import org.nasdanika.models.app.graph.drawio.RepresentationElementFilter;\nimport org.nasdanika.common.ProgressMonitor;\nimport org.nasdanika.drawio.Element;\nimport org.nasdanika.drawio.ModelElement;\nimport org.nasdanika.graph.processor.ProcessorInfo;\nimport org.nasdanika.models.app.graph.WidgetFactory;\nimport org.nasdanika.capability.CapabilityFactory.Loader\n\n// Script arguments for reference\nLoader loader = args[0];\nProgressMonitor loaderProgressMonitor = args[1];\nObject data = args[2]; // From fragment\n\nnew RepresentationElementFilter() {\n\n    @Override\n    void filterRepresentationElement(\n            ModelElement sourceElement, \n            ModelElement representationElement,\n            Map&lt;Element, ProcessorInfo&lt;WidgetFactory&gt;&gt; registry, ProgressMonitor progressMonitor) {\n\n        if (&quot;Bob&quot;.equals(representationElement.getLabel())) {\n            representationElement.style(&quot;imageBorder&quot;, &quot;default&quot;);\n        }\n    }\n    \n} Label or its subclass, e.g. Action to use as the root of the HTML Application model. If specified, labels generated from the diagram are added to the principal action, which is the first child of the root label, if it is present. If the principal action is not present or -R, --add-to-root option is set, then the generated labels are added to the root label as children. Example Below is a YAML definition of a root action. Action:\n    icon: https://docs.nasdanika.org/images/nasdanika-logo.png\n    text: Nasdanika Templates\n    location: https://github.com/Nasdanika-Templates\n    children:\n      - Action:\n          location: ${base-uri}search.html\n          icon: fas fa-search\n          text: Search\n          content:\n            Interpolator:\n              source:\n                exec.content.Resource: classpath://org/nasdanika/models/app/gen/search.html\n      - Action:\n          location: ${base-uri}glossary.html\n          text: Glossary\n          content:\n            Interpolator:\n              source:\n                exec.content.Resource: classpath://org/nasdanika/models/app/gen/semantic-info.html\n    navigation:\n      - Action:\n          text: Source\n          icon: fab fa-github\n          location: https://github.com/Nasdanika-Templates/drawio-site  \n See Action Load Specification for supported configuration keys."},"help/index.html":{"link-uuid":"fbc0f453-aa3c-4f66-8871-18f01226793e","title":"help","content":"Usage: nsd help [-ahHV] [-l=&lt;level&gt;] [-o=&lt;output&gt;] [COMMAND] Outputs usage for all registred commands -a, --action-model Output to action model -h, --help Show this help message and exit. -H, --html Output to HTML -l, --header-level=&lt;level&gt; Starting level for HTML header tags in HTML output, the default value is 1. -o, --output=&lt;output&gt; Output file -V, --version Print version information and exit. Commands: site - Generates help HTML site"},"help/site/index.html":{"path":"help/site","link-uuid":"5df42bd0-01b0-4914-89e4-5a9e2092989e","title":"site","content":"Usage: nsd help site [-hlV] [--progress-console] [--progress-data] [--progress-json] [-b=&lt;baseDir&gt;] [-m=&lt;domian&gt;] [-P=&lt;parallelism&gt;] [--progress-output=&lt;progressOutput&gt;] [-r=&lt;pageErrors&gt;] [--root-action-icon=&lt;rootActionIcon&gt;] [--root-action-location=&lt;rootActionLocation&gt;] [--root-action-text=&lt;rootActionText&gt;] [-t=&lt;timeout&gt;] [-T=&lt;pageTemplate&gt;] [-w=&lt;workDir&gt;] [-c=&lt;String=String&gt;]... [-C=URL]... [-M=&lt;String=String&gt;]... [-e [=&lt;excludes&gt;...]]... [-i[=&lt;includes&gt;...]]... &lt;output&gt; Generates help HTML site &lt;output&gt; Output directory -b, --base-dir=&lt;baseDir&gt; Base directory -c, --context-entry=&lt;String=String&gt; Context entries. Shadow entries in contexts and mounts. -C, --context=URL Context resource URL relative to the current directory. YAML, JSON, or properties. In properties dots are treated as key path separators. Type is inferred from the content type header, if it is present, or extension. Contexts are composed in the order of definition, later context entries shadowing the former -e, --exclude[=&lt;excludes&gt;...] Output directory clean excludes Ant pattern -h, --help Show this help message and exit. -i, --include[=&lt;includes&gt;...] Output directory clean includes Ant pattern -l, --[no-]clean Clean working directory defaults to true -m, --domain=&lt;domian&gt; Sitemap domain -M, --context-mount=&lt;String=String&gt; MappingContext resource URL relative to the current directory. YAML, JSON, or properties. In properties dots are treated as key path separators. Type is inferred from the content type header, if it is present, or extension. Mounts shadow context entries. -P, --parallelism=&lt;parallelism&gt; If the value greater than one then an executor service is created and injected into the context to allow concurrent execution. --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -r, --errors=&lt;pageErrors&gt; Expected number of page errors -1 for any (not fail on errors) default is 0 --root-action-icon=&lt;rootActionIcon&gt; Root action icon --root-action-location=&lt;rootActionLocation&gt; Root action location --root-action-text=&lt;rootActionText&gt; Root action text -t, --timeout=&lt;timeout&gt; If parallelism is greater than one this option specifies timout in seconds awaiting completion of execution. Default value is 60. -T, --page-template=&lt;pageTemplate&gt; Page template URI relative to the current directory -V, --version Print version information and exit. -w, --work-dir=&lt;workDir&gt; Working directory Exit codes: Non-negative number Delegate result -1 Unhandled exception during execution -2 Invalid input -3 Diagnostic failed -4 Execution failed or was cancelled, successful rollback -5 Execution failed or was cancelled, rollback failed -6 Executor service termination timed out Example help site --page-template=&quot;page-template.yml#/&quot; --root-action-icon=https://docs.nasdanika.org/images/nasdanika-logo.png --root-action-location=https://github.com/Nasdanika-Demos --root-action-text=&quot;Nasdanika Demos&quot; target/doc-site"},"gsh/index.html":{"link-uuid":"428e69e9-aeb2-49bf-82bf-55b1c3e97700","title":"gsh","content":"Version: org.nasdanika.groovy Usage: nsd gsh [-hV] [--progress-console] [--progress-data] [--progress-json] [--progress-output=&lt;progressOutput&gt;] [-p=&lt;String=String&gt;]... [-P=URL]... [&lt;args&gt;...] Groovy Shell [&lt;args&gt;...] Argument URIs -h, --help Show this help message and exit. -p, --property=&lt;String=String&gt; Property -P, --properties=URL Properties resource URL relative to the current directory. YAML, JSON, or properties. Type is inferred from the content type header, if it is present, or extension. Properties are loaded in the order of definition, later properties replacing the former --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -V, --version Print version information and exit."},"gitlab/contribute/retrospect/invoke/index.html":{"path":"gitlab/contribute/retrospect/invoke","link-uuid":"a41c2f0d-7966-4ad4-b406-b33648fd90b9","title":"invoke","content":"Version: org.nasdanika.cli Usage: nsd gitlab contribute retrospect invoke [-fhV] [--progress-console] [--progress-data] [--progress-json] [--progress-output=&lt;progressOutput&gt;] [-p=&lt;String=String&gt;]... [-P=URL]... &lt;uri&gt; [&lt;bindings&gt;...] Invokes URI &lt;uri&gt; URI to invoke [&lt;bindings&gt;...] Bindings URIs -f, --file URI parameter is a file path -h, --help Show this help message and exit. -p, --property=&lt;String=String&gt; Property -P, --properties=URL Properties resource URL relative to the current directory. YAML, JSON, or properties. Type is inferred from the content type header, if it is present, or extension. Properties are loaded in the order of definition, later properties replacing the former --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -V, --version Print version information and exit. Loads an invocable from a URI as explained in Loading Invocables from URIs and then invokes it with arguments obtained from parameters invocable URIs."},"list-rules/index.html":{"link-uuid":"6c80e976-f7ec-46fd-ac7b-7d3d611558e0","title":"list-rules","content":"Version: org.nasdanika.launcher.demo Usage: nsd list-rules [-hV] [-o=&lt;output&gt;] [--exclude-rule [=&lt;ruleExcludes&gt;...]]... [--exclude-rule-set [=&lt;ruleSetExcludes&gt;...]]... [--include-rule [=&lt;ruleIncludes&gt;...]]... [--include-rule-set [=&lt;ruleSetIncludes&gt;...]]... Lists available rules --exclude-rule[=&lt;ruleExcludes&gt;...] ID's of rules to exclude --exclude-rule-set[=&lt;ruleSetExcludes&gt;...] ID's of rule sets to exclude -h, --help Show this help message and exit. --include-rule[=&lt;ruleIncludes&gt;...] ID's of rules to include --include-rule-set[=&lt;ruleSetIncludes&gt;...] ID's of rule sets to include -o, --output=&lt;output&gt; Output file -V, --version Print version information and exit."},"inspect-yaml/index.html":{"link-uuid":"61fa2c1f-3d1e-4861-9a54-af8d6487210e","title":"inspect-yaml","content":"Version: org.nasdanika.launcher.demo Usage: nsd inspect-yaml [-hV] [--parallel] [--progress-console] [--progress-data] [--progress-json] [--stop-on-first-fail] [--limit=&lt;limit&gt;] [-o=&lt;output&gt;] [--progress-output=&lt;progressOutput&gt;] [-c=&lt;String=String&gt;]... [-C=URL]... [--content-type-resource-factory=&lt;String=Class&gt;]... [--extension-resource-factory=&lt;String=Class&gt;]... [-f=&lt;failOnSeverities&gt;]... [-M=&lt;String=String&gt;]... [--protocol-resource-factory=&lt;String=Class&gt;]... [-e [=&lt;resourceExcludes&gt;...]]... [--exclude-rule [=&lt;ruleExcludes&gt;...]]... [--exclude-rule-set [=&lt;ruleSetExcludes&gt;...]]... [--exclude-type [=&lt;typeExcludes&gt;...]]... [-i [=&lt;resourceIncludes&gt;...]]... [--include-rule [=&lt;ruleIncludes&gt;...]]... [--include-rule-set [=&lt;ruleSetIncludes&gt;...]]... [--include-type [=&lt;typeIncludes&gt;...]]... &lt;inputs&gt;... Demo of YAML inspection &lt;inputs&gt;... Files and directories to inspect -c, --context-entry=&lt;String=String&gt; Context entries. Shadow entries in contexts and mounts. -C, --context=URL Context resource URL relative to the current directory. YAML, JSON, or properties. In properties dots are treated as key path separators. Type is inferred from the content type header, if it is present, or extension. Contexts are composed in the order of definition, later context entries shadowing the former --content-type-resource-factory=&lt;String=Class&gt; Maps content type to resource factory class -e, --exclude-resource[=&lt;resourceExcludes&gt;...] Resources to exclude from inspection Ant pattern --exclude-rule[=&lt;ruleExcludes&gt;...] ID's of rules to exclude --exclude-rule-set[=&lt;ruleSetExcludes&gt;...] ID's of rule sets to exclude --exclude-type[=&lt;typeExcludes&gt;...] Target types to exclude --extension-resource-factory=&lt;String=Class&gt; Maps extension to resource factory class -f, --fail-on=&lt;failOnSeverities&gt; Names of severities to fail on -h, --help Show this help message and exit. -i, --include-resource[=&lt;resourceIncludes&gt;...] Resources to include in inspection Ant pattern --include-rule[=&lt;ruleIncludes&gt;...] ID's of rules to include --include-rule-set[=&lt;ruleSetIncludes&gt;...] ID's of rule sets to include --include-type[=&lt;typeIncludes&gt;...] Target types to include --limit=&lt;limit&gt; Max number of results to report -M, --context-mount=&lt;String=String&gt; MappingContext resource URL relative to the current directory. YAML, JSON, or properties. In properties dots are treated as key path separators. Type is inferred from the content type header, if it is present, or extension. Mounts shadow context entries. -o, --output=&lt;output&gt; Output file --parallel Parallel inspection --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor --protocol-resource-factory=&lt;String=Class&gt; Maps protocol to resource factory class --stop-on-first-fail Stop on first failure -V, --version Print version information and exit."},"model/html-app/index.html":{"path":"model/html-app","link-uuid":"d1dba6d7-536b-4d15-8e2a-8b58059bbf9a","title":"html-app","content":"Version: org.nasdanika.models.app.cli Usage: nsd model html-app [-fhRV] [-P=&lt;insertionIndex&gt;] [-r=&lt;rootLabel&gt;] [-c=&lt;String=String&gt;]... [-C=URL]... [--content-type-resource-factory=&lt;String=Class&gt;]... [--extension-resource-factory=&lt;String=Class&gt;]... [-M=&lt;String=String&gt;]... [--protocol-resource-factory=&lt;String=Class&gt;]... [COMMAND] Generates html application model from a drawio document -c, --context-entry=&lt;String=String&gt; Context entries. Shadow entries in contexts and mounts. -C, --context=URL Context resource URL relative to the current directory. YAML, JSON, or properties. In properties dots are treated as key path separators. Type is inferred from the content type header, if it is present, or extension. Contexts are composed in the order of definition, later context entries shadowing the former --content-type-resource-factory=&lt;String=Class&gt; Maps content type to resource factory class --extension-resource-factory=&lt;String=Class&gt; Maps extension to resource factory class -f, --file Root label option is a file path -h, --help Show this help message and exit. -M, --context-mount=&lt;String=String&gt; MappingContext resource URL relative to the current directory. YAML, JSON, or properties. In properties dots are treated as key path separators. Type is inferred from the content type header, if it is present, or extension. Mounts shadow context entries. -P, --position=&lt;insertionIndex&gt; Insertion position Defaults to 0 --protocol-resource-factory=&lt;String=Class&gt; Maps protocol to resource factory class -r, --root-label=&lt;rootLabel&gt; Root label URL or file path, resolved relative to the current directory -R, --add-to-root Add labels to the root even if the principal is present -V, --version Print version information and exit. Commands: save - Saves model to a file site - Generates HTML site Options -r, --root-label Label or its subclass, e.g. Action to use as the root of the HTML Application model. If specified, labels generated from the diagram are added to the principal action, which is the first child of the root label, if it is present. If the principal action is not present or -R, --add-to-root option is set, then the generated labels are added to the root label as children. Example Below is a YAML definition of a root action. Action:\n    icon: https://docs.nasdanika.org/images/nasdanika-logo.png\n    text: Nasdanika Templates\n    location: https://github.com/Nasdanika-Templates\n    children:\n      - Action:\n          location: ${base-uri}search.html\n          icon: fas fa-search\n          text: Search\n          content:\n            Interpolator:\n              source:\n                exec.content.Resource: classpath://org/nasdanika/models/app/gen/search.html\n      - Action:\n          location: ${base-uri}glossary.html\n          text: Glossary\n          content:\n            Interpolator:\n              source:\n                exec.content.Resource: classpath://org/nasdanika/models/app/gen/semantic-info.html\n    navigation:\n      - Action:\n          text: Source\n          icon: fab fa-github\n          location: https://github.com/Nasdanika-Templates/drawio-site  \n See Action Load Specification for supported configuration keys. -r, --root-label Label or its subclass, e.g. Action to use as the root of the HTML Application model. If specified, labels generated from the diagram are added to the principal action, which is the first child of the root label, if it is present. If the principal action is not present or -R, --add-to-root option is set, then the generated labels are added to the root label as children. Example Below is a YAML definition of a root action. Action:\n    icon: https://docs.nasdanika.org/images/nasdanika-logo.png\n    text: Nasdanika Templates\n    location: https://github.com/Nasdanika-Templates\n    children:\n      - Action:\n          location: ${base-uri}search.html\n          icon: fas fa-search\n          text: Search\n          content:\n            Interpolator:\n              source:\n                exec.content.Resource: classpath://org/nasdanika/models/app/gen/search.html\n      - Action:\n          location: ${base-uri}glossary.html\n          text: Glossary\n          content:\n            Interpolator:\n              source:\n                exec.content.Resource: classpath://org/nasdanika/models/app/gen/semantic-info.html\n    navigation:\n      - Action:\n          text: Source\n          icon: fab fa-github\n          location: https://github.com/Nasdanika-Templates/drawio-site  \n See Action Load Specification for supported configuration keys. Label or its subclass, e.g. Action to use as the root of the HTML Application model. If specified, labels generated from the diagram are added to the principal action, which is the first child of the root label, if it is present. If the principal action is not present or -R, --add-to-root option is set, then the generated labels are added to the root label as children. Example Below is a YAML definition of a root action. Action:\n    icon: https://docs.nasdanika.org/images/nasdanika-logo.png\n    text: Nasdanika Templates\n    location: https://github.com/Nasdanika-Templates\n    children:\n      - Action:\n          location: ${base-uri}search.html\n          icon: fas fa-search\n          text: Search\n          content:\n            Interpolator:\n              source:\n                exec.content.Resource: classpath://org/nasdanika/models/app/gen/search.html\n      - Action:\n          location: ${base-uri}glossary.html\n          text: Glossary\n          content:\n            Interpolator:\n              source:\n                exec.content.Resource: classpath://org/nasdanika/models/app/gen/semantic-info.html\n    navigation:\n      - Action:\n          text: Source\n          icon: fab fa-github\n          location: https://github.com/Nasdanika-Templates/drawio-site  \n See Action Load Specification for supported configuration keys."},"java/index.html":{"link-uuid":"2eb79269-cac0-4a63-9c7d-f44e3d62ebab","title":"java","content":"Version: org.nasdanika.models.java.cli Usage: nsd java [-hV] [COMMAND] Commands related to Java -h, --help Show this help message and exit. -V, --version Print version information and exit. Commands: junit - Generates JUnit tests"},"shell/index.html":{"link-uuid":"ace7e4c8-82ae-473e-9554-01e880ac28f4","title":"shell","content":"Usage: nsd shell [-hV] Starts an interactive shell or executes commands from input files or URL's -h, --help Show this help message and exit. -V, --version Print version information and exit."},"model/ecore-html-app/save/index.html":{"path":"model/ecore-html-app/save","link-uuid":"ab23762e-1bef-4f73-b36f-20cbce4185ee","title":"save","content":"Version: org.nasdanika.cli Usage: nsd model ecore-html-app save [-hV] [--progress-console] [--progress-data] [--progress-json] [--progress-output=&lt;progressOutput&gt;] [--content-type-resource-factory=&lt;String=Cl ass&gt;]... [--extension-resource-factory=&lt;String=Class &gt;]... [--protocol-resource-factory=&lt;String=Class&gt; ]... &lt;output&gt; Saves model to a file &lt;output&gt; Output file --content-type-resource-factory=&lt;String=Class&gt; Maps content type to resource factory class --extension-resource-factory=&lt;String=Class&gt; Maps extension to resource factory class -h, --help Show this help message and exit. --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor --protocol-resource-factory=&lt;String=Class&gt; Maps protocol to resource factory class -V, --version Print version information and exit."},"module-graph/index.html":{"link-uuid":"ceb73fdc-8afc-47d5-9d10-6be7a2dac60d","title":"module-graph","content":"Version: org.nasdanika.launcher.demo Usage: nsd module-graph [-h=&lt;height&gt;] [-t=&lt;template&gt;] [-w=&lt;width&gt;] [-e=&lt;excludeModules&gt;]... [-i=&lt;includeModules&gt;]... &lt;output&gt; Generates module dependency graph &lt;output&gt; Output file -e, --exclude-modules=&lt;excludeModules&gt; Modules to exclude Supports .* and .** patterns -h, --height=&lt;height&gt; Layout height, defaults to 1500 -i, --include-modules=&lt;includeModules&gt; Modules to include Supports .* and .** patterns -t, --template=&lt;template&gt; HTML page template -w, --width=&lt;width&gt; Layout width, defaults to 2000"},"model/index.html":{"link-uuid":"07d42e58-d221-458e-814d-6dc113f81603","title":"model","content":"Version: org.nasdanika.cli Usage: nsd model [-fhV] [--content-type-resource-factory=&lt;String=Class&gt;]... [--extension-resource-factory=&lt;String=Class&gt;]... [--protocol-resource-factory=&lt;String=Class&gt;]... &lt;uri&gt; [COMMAND] Loads EObject from a URI or file &lt;uri&gt; EObject URI or file path, resolved relative to the current directory --content-type-resource-factory=&lt;String=Class&gt; Maps content type to resource factory class --extension-resource-factory=&lt;String=Class&gt; Maps extension to resource factory class -f, --file URI parameter is a file path -h, --help Show this help message and exit. --protocol-resource-factory=&lt;String=Class&gt; Maps protocol to resource factory class -V, --version Print version information and exit. Commands: ecore-html-app - Generates Ecore model documentation html app model html-app - Generates html application model from a drawio document save - Saves model to a file"},"model/ecore-html-app/index.html":{"path":"model/ecore-html-app","link-uuid":"31c76b0a-6d58-4082-9551-d31cb9fb4a63","title":"ecore-html-app","content":"Version: org.nasdanika.models.ecore.cli Usage: nsd model ecore-html-app [-fhRV] [-P=&lt;insertionIndex&gt;] [-r=&lt;rootLabel&gt;] [-c=&lt;String=String&gt;]... [-C=URL]... [--content-type-resource-factory=&lt;String=Class&gt;] ... [--extension-resource-factory=&lt;String=Class&gt;]... [-M=&lt;String=String&gt;]... [--protocol-resource-factory=&lt;String=Class&gt;]... [COMMAND] Generates Ecore model documentation html app model -c, --context-entry=&lt;String=String&gt; Context entries. Shadow entries in contexts and mounts. -C, --context=URL Context resource URL relative to the current directory. YAML, JSON, or properties. In properties dots are treated as key path separators. Type is inferred from the content type header, if it is present, or extension. Contexts are composed in the order of definition, later context entries shadowing the former --content-type-resource-factory=&lt;String=Class&gt; Maps content type to resource factory class --extension-resource-factory=&lt;String=Class&gt; Maps extension to resource factory class -f, --file Root label option is a file path -h, --help Show this help message and exit. -M, --context-mount=&lt;String=String&gt; MappingContext resource URL relative to the current directory. YAML, JSON, or properties. In properties dots are treated as key path separators. Type is inferred from the content type header, if it is present, or extension. Mounts shadow context entries. -P, --position=&lt;insertionIndex&gt; Insertion position Defaults to 0 --protocol-resource-factory=&lt;String=Class&gt; Maps protocol to resource factory class -r, --root-label=&lt;rootLabel&gt; Root label URL or file path, resolved relative to the current directory -R, --add-to-root Add labels to the root even if the principal is present -V, --version Print version information and exit. Commands: save - Saves model to a file site - Generates HTML site Options -r, --root-label Label or its subclass, e.g. Action to use as the root of the HTML Application model. If specified, labels generated from the diagram are added to the principal action, which is the first child of the root label, if it is present. If the principal action is not present or -R, --add-to-root option is set, then the generated labels are added to the root label as children. Example Below is a YAML definition of a root action. Action:\n    icon: https://docs.nasdanika.org/images/nasdanika-logo.png\n    text: Nasdanika Templates\n    location: https://github.com/Nasdanika-Templates\n    children:\n      - Action:\n          location: ${base-uri}search.html\n          icon: fas fa-search\n          text: Search\n          content:\n            Interpolator:\n              source:\n                exec.content.Resource: classpath://org/nasdanika/models/app/gen/search.html\n      - Action:\n          location: ${base-uri}glossary.html\n          text: Glossary\n          content:\n            Interpolator:\n              source:\n                exec.content.Resource: classpath://org/nasdanika/models/app/gen/semantic-info.html\n    navigation:\n      - Action:\n          text: Source\n          icon: fab fa-github\n          location: https://github.com/Nasdanika-Templates/drawio-site  \n See Action Load Specification for supported configuration keys. -r, --root-label Label or its subclass, e.g. Action to use as the root of the HTML Application model. If specified, labels generated from the diagram are added to the principal action, which is the first child of the root label, if it is present. If the principal action is not present or -R, --add-to-root option is set, then the generated labels are added to the root label as children. Example Below is a YAML definition of a root action. Action:\n    icon: https://docs.nasdanika.org/images/nasdanika-logo.png\n    text: Nasdanika Templates\n    location: https://github.com/Nasdanika-Templates\n    children:\n      - Action:\n          location: ${base-uri}search.html\n          icon: fas fa-search\n          text: Search\n          content:\n            Interpolator:\n              source:\n                exec.content.Resource: classpath://org/nasdanika/models/app/gen/search.html\n      - Action:\n          location: ${base-uri}glossary.html\n          text: Glossary\n          content:\n            Interpolator:\n              source:\n                exec.content.Resource: classpath://org/nasdanika/models/app/gen/semantic-info.html\n    navigation:\n      - Action:\n          text: Source\n          icon: fab fa-github\n          location: https://github.com/Nasdanika-Templates/drawio-site  \n See Action Load Specification for supported configuration keys. Label or its subclass, e.g. Action to use as the root of the HTML Application model. If specified, labels generated from the diagram are added to the principal action, which is the first child of the root label, if it is present. If the principal action is not present or -R, --add-to-root option is set, then the generated labels are added to the root label as children. Example Below is a YAML definition of a root action. Action:\n    icon: https://docs.nasdanika.org/images/nasdanika-logo.png\n    text: Nasdanika Templates\n    location: https://github.com/Nasdanika-Templates\n    children:\n      - Action:\n          location: ${base-uri}search.html\n          icon: fas fa-search\n          text: Search\n          content:\n            Interpolator:\n              source:\n                exec.content.Resource: classpath://org/nasdanika/models/app/gen/search.html\n      - Action:\n          location: ${base-uri}glossary.html\n          text: Glossary\n          content:\n            Interpolator:\n              source:\n                exec.content.Resource: classpath://org/nasdanika/models/app/gen/semantic-info.html\n    navigation:\n      - Action:\n          text: Source\n          icon: fab fa-github\n          location: https://github.com/Nasdanika-Templates/drawio-site  \n See Action Load Specification for supported configuration keys."},"gitlab/contribute/retrospect/gsh/index.html":{"path":"gitlab/contribute/retrospect/gsh","link-uuid":"dace286f-fde4-4e9b-86d0-eb93dc7a4136","title":"gsh","content":"Version: org.nasdanika.groovy Usage: nsd gitlab contribute retrospect gsh [-hV] [--progress-console] [--progress-data] [--progress-json] [--progress-output=&lt;progressOutput&gt;] [-p=&lt;String=String&gt;]... [-P=URL]... [&lt;args&gt;...] Groovy Shell [&lt;args&gt;...] Argument URIs -h, --help Show this help message and exit. -p, --property=&lt;String=String&gt; Property -P, --properties=URL Properties resource URL relative to the current directory. YAML, JSON, or properties. Type is inferred from the content type header, if it is present, or extension. Properties are loaded in the order of definition, later properties replacing the former --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -V, --version Print version information and exit."},"gitlab/index.html":{"link-uuid":"9d48e98e-72c0-4ec2-be37-c443dfedd32b","title":"gitlab","content":"Usage: nsd gitlab [-hV] [-l=&lt;clientRateLimit&gt;] [-t=&lt;accessToken&gt;] [-u=&lt;url&gt;] [-w=&lt;clientRateLimitWindow&gt;] [COMMAND] Commands for working with GitLab -h, --help Show this help message and exit. -l, --client-rate-limit=&lt;clientRateLimit&gt; Client enforced rate limit use this option if the server limits requests rate, but does not rate limit headers to the client only errors if the rate limit is exceeded -t, --access-token=&lt;accessToken&gt; GitLab access token, defaults to the value of GITLAB_ACCESS_TOKEN environment variable -u, --url=&lt;url&gt; GitLab URL, defaults to the value of GITLAB_URL environment variable -V, --version Print version information and exit. -w, --client-rate-limit-window=&lt;clientRateLimitWindow&gt; Client enforced rate limit window in seconds defaults to 10 ignored if the client rate limit is not set Commands: contribute - Parent for sub-command contributing via GitLabURIHandler gsh - Groovy Shell invoke - Invokes URI"},"rules/index.html":{"link-uuid":"13ab79af-f269-423a-ab3b-44b3f26b2d1a","title":"rules","content":"Usage: nsd rules [-hV] [COMMAND] Rules commands -h, --help Show this help message and exit. -V, --version Print version information and exit. Commands: action-model - Generates rule set documentation action model list - Lists available rule sets and rules site - Generates rule set documentation site"},"exit/index.html":{"link-uuid":"d9b641ef-0a22-4a6f-b4da-492e5387f91a","title":"exit","content":"Version: org.nasdanika.cli Usage: nsd exit [-hV] Exits shell -h, --help Show this help message and exit. -V, --version Print version information and exit."},"gitlab/contribute/junit/jacoco/index.html":{"path":"gitlab/contribute/junit/jacoco","link-uuid":"7314a88f-7c00-4736-b47a-4a4141088b5e","title":"jacoco","content":"Usage: nsd gitlab contribute junit jacoco [-hV] [-c=&lt;classes&gt;] [-j=&lt;jacoco&gt;] [-m=&lt;moduleName&gt;] Loads coverage from jacoco.exec and classes directory -c, --classes=&lt;classes&gt; Classes directory path relative to the project directory, defaults to target/classes -h, --help Show this help message and exit. -j, --jacoco=&lt;jacoco&gt; jacoco.exec file path relative to the project directory, defaults to target/jacoco.exec -m, --module=&lt;moduleName&gt; Coverage module name -V, --version Print version information and exit."},"drawio/html-app/site/index.html":{"path":"drawio/html-app/site","link-uuid":"8df9cd1a-9d3c-42ef-bf6d-baf0fa977299","title":"site","content":"Version: org.nasdanika.models.app.cli Usage: nsd drawio html-app site [-hlV] [--progress-console] [--progress-data] [--progress-json] [-b=&lt;baseDir&gt;] [-F=&lt;pageTemplateFile&gt;] [-m=&lt;domian&gt;] [-P=&lt;parallelism&gt;] [--progress-output=&lt;progressOutput&gt;] [-r=&lt;pageErrors&gt;] [-t=&lt;timeout&gt;] [-T=&lt;pageTemplate&gt;] [-w=&lt;workDir&gt;] [-x=&lt;extension&gt;] [-c=&lt;String=String&gt;]... [-C=URL]... [-M=&lt;String=String&gt;]... [-e [=&lt;excludes&gt;...]]... [-i[=&lt;includes&gt;...]]... &lt;output&gt; Generates HTML site &lt;output&gt; Output directory relative to the base directory -b, --base-dir=&lt;baseDir&gt; Base directory -c, --context-entry=&lt;String=String&gt; Context entries. Shadow entries in contexts and mounts. -C, --context=URL Context resource URL relative to the current directory. YAML, JSON, or properties. In properties dots are treated as key path separators. Type is inferred from the content type header, if it is present, or extension. Contexts are composed in the order of definition, later context entries shadowing the former -e, --exclude[=&lt;excludes&gt;...] Output directory clean excludes Ant pattern -F, --page-template-file=&lt;pageTemplateFile&gt; Page template file relative to the current directory -h, --help Show this help message and exit. -i, --include[=&lt;includes&gt;...] Output directory clean includes Ant pattern -l, --[no-]clean Clean working directory defaults to true -m, --domain=&lt;domian&gt; Sitemap domain -M, --context-mount=&lt;String=String&gt; MappingContext resource URL relative to the current directory. YAML, JSON, or properties. In properties dots are treated as key path separators. Type is inferred from the content type header, if it is present, or extension. Mounts shadow context entries. -P, --parallelism=&lt;parallelism&gt; If the value greater than one then an executor service is created and injected into the context to allow concurrent execution. --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -r, --errors=&lt;pageErrors&gt; Expected number of page errors -1 for any (not fail on errors) default is 0 -t, --timeout=&lt;timeout&gt; If parallelism is greater than one this option specifies timout in seconds awaiting completion of execution. Default value is 60. -T, --page-template=&lt;pageTemplate&gt; Page template URI relative to the current directory -V, --version Print version information and exit. -w, --work-dir=&lt;workDir&gt; Working directory -x, --extension=&lt;extension&gt; Extension of files to include in search and site map. Defaults to html Exit codes: Non-negative number Delegate result -1 Unhandled exception during execution -2 Invalid input -3 Diagnostic failed -4 Execution failed or was cancelled, successful rollback -5 Execution failed or was cancelled, rollback failed -6 Executor service termination timed out Example drawio diagram.drawio html-app -r root-action.yml --add-to-root site -r=-1 -F page-template.yml docs Grandparent drawio command loads diagram.drawio diagram resource Parent html-app command generates an html application model from the diagram elements This command: Loads a page template from page-template.yml Generates a documentation site ignoring page errors (-r=-1) Outputs the generated site to the docs directory Options -r, --errors -r=-1 command line option means &ldquo;don&rsquo;t fail on page errors&rdquo; such as: Blank pages Broken internal links Missing resources Missing resources are reported on pages using danger alert blocks. If you want to prevent deployment of a site with page errors, don&rsquo;t use the option or set it to the expected number of errors - there might be &ldquo;known errors&rdquo; which you are OK to live with. -T, --page-template Bootstrap Page to use as a template for site pages. In the page template file you can: Modify the theme - choose one of 20+ Bootswatch themes or the default theme. Please note that generated sites look good with light themes, and not so good (in my personal opinion) with dark themes. Set fluid to true. Modify navigation panel style See Bootstrap Page Load Specification for supported configuration keys. Sample page template in YAML: bootstrap.Page:\n  cdn: true\n  theme: Simplex\n  name: Application Page Template\n  language: EN\n  stylesheets: \n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/css/app.css \n    - https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css\n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/themes/default/style.min.css\n    - https://cdn.jsdelivr.net/npm/github-markdown-css@5.1.0/github-markdown.min.css\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/styles/default.min.css\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.css\n  scripts:\n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/common.js \n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/dark-head.js \n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/jstree.min.js\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/highlight.min.js\n    - https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.min.js\n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/components/table.js\n    - https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\n  body:\n    app.Page:\n      fluid: false\n      navigation-panel:\n        style: SEARCHABLE_TREE # COLLAPSIBLE_CARDS\n        collapsible: true -r, --errors -r=-1 command line option means &ldquo;don&rsquo;t fail on page errors&rdquo; such as: Blank pages Broken internal links Missing resources Missing resources are reported on pages using danger alert blocks. If you want to prevent deployment of a site with page errors, don&rsquo;t use the option or set it to the expected number of errors - there might be &ldquo;known errors&rdquo; which you are OK to live with. -T, --page-template Bootstrap Page to use as a template for site pages. In the page template file you can: Modify the theme - choose one of 20+ Bootswatch themes or the default theme. Please note that generated sites look good with light themes, and not so good (in my personal opinion) with dark themes. Set fluid to true. Modify navigation panel style See Bootstrap Page Load Specification for supported configuration keys. Sample page template in YAML: bootstrap.Page:\n  cdn: true\n  theme: Simplex\n  name: Application Page Template\n  language: EN\n  stylesheets: \n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/css/app.css \n    - https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css\n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/themes/default/style.min.css\n    - https://cdn.jsdelivr.net/npm/github-markdown-css@5.1.0/github-markdown.min.css\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/styles/default.min.css\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.css\n  scripts:\n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/common.js \n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/dark-head.js \n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/jstree.min.js\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/highlight.min.js\n    - https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.min.js\n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/components/table.js\n    - https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\n  body:\n    app.Page:\n      fluid: false\n      navigation-panel:\n        style: SEARCHABLE_TREE # COLLAPSIBLE_CARDS\n        collapsible: true -r=-1 command line option means &ldquo;don&rsquo;t fail on page errors&rdquo; such as: Blank pages Broken internal links Missing resources Missing resources are reported on pages using danger alert blocks. If you want to prevent deployment of a site with page errors, don&rsquo;t use the option or set it to the expected number of errors - there might be &ldquo;known errors&rdquo; which you are OK to live with. Bootstrap Page to use as a template for site pages. In the page template file you can: Modify the theme - choose one of 20+ Bootswatch themes or the default theme. Please note that generated sites look good with light themes, and not so good (in my personal opinion) with dark themes. Set fluid to true. Modify navigation panel style See Bootstrap Page Load Specification for supported configuration keys. Sample page template in YAML: bootstrap.Page:\n  cdn: true\n  theme: Simplex\n  name: Application Page Template\n  language: EN\n  stylesheets: \n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/css/app.css \n    - https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css\n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/themes/default/style.min.css\n    - https://cdn.jsdelivr.net/npm/github-markdown-css@5.1.0/github-markdown.min.css\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/styles/default.min.css\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.css\n  scripts:\n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/common.js \n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/dark-head.js \n    - https://cdn.jsdelivr.net/npm/jstree@3.3.11/dist/jstree.min.js\n    - https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.3.1/build/highlight.min.js\n    - https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js\n    - https://cdn.jsdelivr.net/npm/bootstrap-vue@2.21.2/dist/bootstrap-vue.min.js\n    - https://cdn.jsdelivr.net/gh/Nasdanika-Models/html-app@master/gen/web-resources/js/components/table.js\n    - https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\n  body:\n    app.Page:\n      fluid: false\n      navigation-panel:\n        style: SEARCHABLE_TREE # COLLAPSIBLE_CARDS\n        collapsible: true"},"app/site/index.html":{"path":"app/site","link-uuid":"b665bffd-57ed-468c-bd46-135974efd562","title":"site","content":"Version: org.nasdanika.models.app.cli Usage: nsd app site [-hlV] [--progress-console] [--progress-data] [--progress-json] [-b=&lt;baseDir&gt;] [-m=&lt;domian&gt;] [-P=&lt;parallelism&gt;] [--progress-output=&lt;progressOutput&gt;] [-r=&lt;pageErrors&gt;] [-t=&lt;timeout&gt;] [-T=&lt;pageTemplate&gt;] [-w=&lt;workDir&gt;] [-c=&lt;String=String&gt;]... [-C=URL]... [-M=&lt;String=String&gt;]... [-e[=&lt;excludes&gt;...]]... [-i [=&lt;includes&gt;...]]... &lt;model&gt; &lt;output&gt; Generates HTML site &lt;model&gt; Model URI, resolved relative to the current directory &lt;output&gt; Output directory -b, --base-dir=&lt;baseDir&gt; Base directory -c, --context-entry=&lt;String=String&gt; Context entries. Shadow entries in contexts and mounts. -C, --context=URL Context resource URL relative to the current directory. YAML, JSON, or properties. In properties dots are treated as key path separators. Type is inferred from the content type header, if it is present, or extension. Contexts are composed in the order of definition, later context entries shadowing the former -e, --exclude[=&lt;excludes&gt;...] Output directory clean excludes Ant pattern -h, --help Show this help message and exit. -i, --include[=&lt;includes&gt;...] Output directory clean includes Ant pattern -l, --[no-]clean Clean working directory defaults to true -m, --domain=&lt;domian&gt; Sitemap domain -M, --context-mount=&lt;String=String&gt; MappingContext resource URL relative to the current directory. YAML, JSON, or properties. In properties dots are treated as key path separators. Type is inferred from the content type header, if it is present, or extension. Mounts shadow context entries. -P, --parallelism=&lt;parallelism&gt; If the value greater than one then an executor service is created and injected into the context to allow concurrent execution. --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -r, --errors=&lt;pageErrors&gt; Expected number of page errors -1 for any (not fail on errors) default is 0 -t, --timeout=&lt;timeout&gt; If parallelism is greater than one this option specifies timout in seconds awaiting completion of execution. Default value is 60. -T, --page-template=&lt;pageTemplate&gt; Page template URI relative to the current directory -V, --version Print version information and exit. -w, --work-dir=&lt;workDir&gt; Working directory Exit codes: Non-negative number Delegate result -1 Unhandled exception during execution -2 Invalid input -3 Diagnostic failed -4 Execution failed or was cancelled, successful rollback -5 Execution failed or was cancelled, rollback failed -6 Executor service termination timed out"},"gitlab/contribute/invoke/index.html":{"path":"gitlab/contribute/invoke","link-uuid":"cb9c388e-ced9-45f4-9931-2a97a538ca71","title":"invoke","content":"Version: org.nasdanika.cli Usage: nsd gitlab contribute invoke [-fhV] [--progress-console] [--progress-data] [--progress-json] [--progress-output=&lt;progressOutput&gt;] [-p=&lt;String=String&gt;]... [-P=URL]... &lt;uri&gt; [&lt;bindings&gt;...] Invokes URI &lt;uri&gt; URI to invoke [&lt;bindings&gt;...] Bindings URIs -f, --file URI parameter is a file path -h, --help Show this help message and exit. -p, --property=&lt;String=String&gt; Property -P, --properties=URL Properties resource URL relative to the current directory. YAML, JSON, or properties. Type is inferred from the content type header, if it is present, or extension. Properties are loaded in the order of definition, later properties replacing the former --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -V, --version Print version information and exit. Loads an invocable from a URI as explained in Loading Invocables from URIs and then invokes it with arguments obtained from parameters invocable URIs."},"invoke/index.html":{"link-uuid":"00cac033-b367-4f13-9978-1280ec35d15d","title":"invoke","content":"Version: org.nasdanika.cli Usage: nsd invoke [-fhV] [--progress-console] [--progress-data] [--progress-json] [--progress-output=&lt;progressOutput&gt;] [-p=&lt;String=String&gt;]... [-P=URL]... &lt;uri&gt; [&lt;bindings&gt;...] Invokes URI &lt;uri&gt; URI to invoke [&lt;bindings&gt;...] Bindings URIs -f, --file URI parameter is a file path -h, --help Show this help message and exit. -p, --property=&lt;String=String&gt; Property -P, --properties=URL Properties resource URL relative to the current directory. YAML, JSON, or properties. Type is inferred from the content type header, if it is present, or extension. Properties are loaded in the order of definition, later properties replacing the former --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -V, --version Print version information and exit. Loads an invocable from a URI as explained in Loading Invocables from URIs and then invokes it with arguments obtained from parameters invocable URIs."},"drawio/html-app/save/index.html":{"path":"drawio/html-app/save","link-uuid":"fd8a7f86-4970-4573-808f-61f7008450c4","title":"save","content":"Version: org.nasdanika.cli Usage: nsd drawio html-app save [-hV] [--progress-console] [--progress-data] [--progress-json] [--progress-output=&lt;progressOutput&gt;] [--content-type-resource-factory=&lt;String=Class&gt;] ... [--extension-resource-factory=&lt;String=Class&gt;]... [--protocol-resource-factory=&lt;String=Class&gt;]... &lt;output&gt; Saves model to a file &lt;output&gt; Output file --content-type-resource-factory=&lt;String=Class&gt; Maps content type to resource factory class --extension-resource-factory=&lt;String=Class&gt; Maps extension to resource factory class -h, --help Show this help message and exit. --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor --protocol-resource-factory=&lt;String=Class&gt; Maps protocol to resource factory class -V, --version Print version information and exit."},"rules/action-model/index.html":{"path":"rules/action-model","link-uuid":"6b293698-ddab-40f3-bd87-87afc75dcdb9","title":"action-model","content":"Usage: nsd rules action-model [-fhRV] [--progress-console] [--progress-data] [--progress-json] [--progress-output=&lt;progressOutput&gt;] [-c=&lt;String=String&gt;]... [-C=URL]... [-M=&lt;String=String&gt;]... &lt;model&gt; &lt;output&gt; Generates rule set documentation action model &lt;model&gt; Model URI or file path, resolved relative to the current directory or looked up in registered rule sets if -R option is provided &lt;output&gt; Output file -c, --context-entry=&lt;String=String&gt; Context entries. Shadow entries in contexts and mounts. -C, --context=URL Context resource URL relative to the current directory. YAML, JSON, or properties. In properties dots are treated as key path separators. Type is inferred from the content type header, if it is present, or extension. Contexts are composed in the order of definition, later context entries shadowing the former -f, --file Mdel parameter is a file path -h, --help Show this help message and exit. -M, --context-mount=&lt;String=String&gt; MappingContext resource URL relative to the current directory. YAML, JSON, or properties. In properties dots are treated as key path separators. Type is inferred from the content type header, if it is present, or extension. Mounts shadow context entries. --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -R, --registered Use registered rule set with provided URI -V, --version Print version information and exit."},"gitlab/contribute/gsh/index.html":{"path":"gitlab/contribute/gsh","link-uuid":"fdb7d7d5-ccb4-4ecc-932c-af2b84fdd78c","title":"gsh","content":"Version: org.nasdanika.groovy Usage: nsd gitlab contribute gsh [-hV] [--progress-console] [--progress-data] [--progress-json] [--progress-output=&lt;progressOutput&gt;] [-p=&lt;String=String&gt;]... [-P=URL]... [&lt;args&gt;...] Groovy Shell [&lt;args&gt;...] Argument URIs -h, --help Show this help message and exit. -p, --property=&lt;String=String&gt; Property -P, --properties=URL Properties resource URL relative to the current directory. YAML, JSON, or properties. Type is inferred from the content type header, if it is present, or extension. Properties are loaded in the order of definition, later properties replacing the former --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -V, --version Print version information and exit."},"gitlab/gsh/index.html":{"path":"gitlab/gsh","link-uuid":"22070800-a75b-4297-9cb8-1145a7460988","title":"gsh","content":"Version: org.nasdanika.groovy Usage: nsd gitlab gsh [-hV] [--progress-console] [--progress-data] [--progress-json] [--progress-output=&lt;progressOutput&gt;] [-p=&lt;String=String&gt;]... [-P=URL]... [&lt;args&gt;...] Groovy Shell [&lt;args&gt;...] Argument URIs -h, --help Show this help message and exit. -p, --property=&lt;String=String&gt; Property -P, --properties=URL Properties resource URL relative to the current directory. YAML, JSON, or properties. Type is inferred from the content type header, if it is present, or extension. Properties are loaded in the order of definition, later properties replacing the former --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -V, --version Print version information and exit."},"gitlab/contribute/junit/index.html":{"path":"gitlab/contribute/junit","link-uuid":"8298f29e-1748-4f18-8903-a1f076c41464","title":"junit","content":"Version: org.nasdanika.models.java.cli Usage: nsd gitlab contribute junit [-fhVw] [--[no-]ai] [--[no-] comment-response] [--disabled] [--progress-console] [--progress-data] [--progress-json] [--api-endpoint=&lt;apiEndpoint&gt;] [--class-suffix=&lt;classSuffix&gt;] [-k=&lt;apiKey&gt;] [-l=&lt;limit&gt;] [-m=&lt;deploymentOrModelName&gt;] [--package-suffix=&lt;packageSuffix&gt;] [--progress-output=&lt;progressOutput&gt;] [-r=&lt;prompt&gt;] [-s=&lt;sources&gt;] [-t=&lt;coverageType&gt;] [-v=&lt;apiKeyEnvironmentVariable&gt;] [-e [=&lt;excludes&gt;...]]... [-i[=&lt;includes&gt;...]]... &lt;projectURI&gt; &lt;coverageThreshold&gt; &lt;output&gt; [COMMAND] Generates JUnit tests &lt;projectURI&gt; Project URI &lt;coverageThreshold&gt; Coverage threshold &lt;output&gt; Output URI relative to the project URI --[no-]ai Use AI, defaults to true --api-endpoint=&lt;apiEndpoint&gt; OpenAPI endpoint, defaults to https://api.openai.com/v1/chat/completions --class-suffix=&lt;classSuffix&gt; Test class suffix defaults to Tests --[no-]comment-response Comment AI responses defaults to true --disabled Generate disabled tests -e, --exclude[=&lt;excludes&gt;...] Source excludes Ant pattern -f Project URI is a file path -h, --help Show this help message and exit. -i, --include[=&lt;includes&gt;...] Source includes Ant pattern -k, --api-key=&lt;apiKey&gt; OpenAPI key -l, --limit=&lt;limit&gt; Maximum number of test classes to generate -m, --model=&lt;deploymentOrModelName&gt; OpenAPI deployment or model defaults to gpt-4 --package-suffix=&lt;packageSuffix&gt; Test package suffix defaults to .tests --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -r, --prompt=&lt;prompt&gt; Propmt defaults to 'Generate a JUnit 5 test method leveraging Mockito for the following Java method' -s, --sources=&lt;sources&gt; Sources URI path relative to the project URIy, defaults to src/main/java -t, --coverage-type=&lt;coverageType&gt; Coverage type Valid values: complexity, instruction, branch, line defaults to line -v, --api-key-variable=&lt;apiKeyEnvironmentVariable&gt; OpenAPI key environment variable defaults to OPENAI_API_KEY -V, --version Print version information and exit. -w, --overwrite Overwrite existing tests Commands: jacoco - Loads coverage from jacoco.exec and classes directory"},"drawio/http-server/index.html":{"path":"drawio/http-server","link-uuid":"d26c61d8-3297-42da-bdab-84c0c367e826","title":"http-server","content":"Version: org.nasdanika.http Usage: nsd drawio http-server [-hV] [--[no-]console] [--progress-console] [--progress-data] [--progress-json] [--connection-base=&lt;connectionBase&gt;] [--http-host=&lt;httpHost&gt;] [--http-port=&lt;httpPort&gt;] [--http-server-shutdown-timeout=&lt;timeout&gt;] [--progress-output=&lt;progressOutput&gt;] &lt;processorProperty&gt; &lt;routeProperty&gt; Routes HTTP requests to a diagram element processor &lt;processorProperty&gt; Processor property &lt;routeProperty&gt; Route property --connection-base=&lt;connectionBase&gt; Connection base Valid values: PARENT, SOURCE, TARGET --[no-]console If true starts a console and waits for exit command, otherwise creates a shutdown hook disposing the server -h, --help Show this help message and exit. --http-host=&lt;httpHost&gt; HTTP host (network interface) to bind to --http-port=&lt;httpPort&gt; HTTP port. If a port is not specified, an ephemeral port is used --http-server-shutdown-timeout=&lt;timeout&gt; Timeout in seconds, defaults to 3 seconds --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -V, --version Print version information and exit. Example drawio diagram.drawio http-server --http-port=8080 processor route Parent drawio command loads diagram.drawio file This command: Loads processor invocable URIs from the processor property Loads route definitions from the route property Serves diagram element routes on port 8080 Resources Serving HTTP &mdash; Diagrams &amp; Reflection story Routing HTTP Reactor Netty Reference Guide Parameters &lt;processorProperty&gt; Route serving processors shall implement BiFunction&lt;? super HttpServerRequest,? super HttpServerResponse,? extends Publisher&lt;Void&gt;&gt; to serve a single route. Processors may also implement HttpServerRouteBuilder or be adaptable to it. In this case the route property is optional and is used as a route prefix. Examples Java Single route SystemHttpHandler.java import java.util.concurrent.CompletionStage;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\nimport java.util.function.Consumer;\n\nimport org.nasdanika.capability.CapabilityFactory.Loader;\nimport org.nasdanika.common.Invocable;\nimport org.nasdanika.common.ProgressMonitor;\nimport org.nasdanika.drawio.Node;\nimport org.nasdanika.graph.Element;\nimport org.nasdanika.graph.processor.ConnectionProcessorConfig;\nimport org.nasdanika.graph.processor.NodeProcessorConfig;\nimport org.nasdanika.graph.processor.ProcessorConfig;\nimport org.nasdanika.graph.processor.ProcessorElement;\nimport org.nasdanika.graph.processor.ProcessorInfo;\nimport org.reactivestreams.Publisher;\n\nimport reactor.core.publisher.Mono;\nimport reactor.netty.http.server.HttpServerRequest;\nimport reactor.netty.http.server.HttpServerResponse;\n\n/**\n * Diagram element processor which processes HTTP requests \n */\npublic class SystemHttpHandler implements BiFunction&lt;HttpServerRequest, HttpServerResponse, Publisher&lt;Void&gt;&gt; {\n    \n    private String amount;\n    \n    @ProcessorElement\n    public void setElement(Node element) {\n        this.amount = element.getProperty(&quot;amount&quot;);\n    }\n\n    /**\n     * This is the constructor signature for graph processor classes which are to be instantiated by URIInvocableCapabilityFactory (org.nasdanika.capability.factories.URIInvocableCapabilityFactory).\n     * Config may be of specific types {@link ProcessorConfig} - {@link NodeProcessorConfig} or {@link ConnectionProcessorConfig}.  \n     * @param loader\n     * @param loaderProgressMonitor\n     * @param data\n     * @param fragment\n     * @param config\n     * @param infoProvider\n     * @param endpointWiringStageConsumer\n     * @param wiringProgressMonitor\n     */\n    public SystemHttpHandler(\n            Loader loader,\n            ProgressMonitor loaderProgressMonitor,\n            Object data,\n            String fragment,\n            ProcessorConfig config,\n            BiConsumer&lt;Element, BiConsumer&lt;ProcessorInfo&lt;Invocable&gt;, ProgressMonitor&gt;&gt; infoProvider,\n            Consumer&lt;CompletionStage&lt;?&gt;&gt; endpointWiringStageConsumer,\n            ProgressMonitor wiringProgressMonitor) {\n\n    }\n\n    @Override\n    public Publisher&lt;Void&gt; apply(HttpServerRequest request, HttpServerResponse response) {\n        return response.sendString(Mono.just(&quot;Account: &quot; + request.param(&quot;account&quot;) + &quot;, Amount: &quot; + amount));\n    }\n\n}\n Route builder RouteBuilderProcessor import java.util.concurrent.CompletionStage;\nimport java.util.function.BiConsumer;\nimport java.util.function.Consumer;\n\nimport org.nasdanika.capability.CapabilityFactory.Loader;\nimport org.nasdanika.common.Invocable;\nimport org.nasdanika.common.ProgressMonitor;\nimport org.nasdanika.drawio.Node;\nimport org.nasdanika.graph.Element;\nimport org.nasdanika.graph.processor.ConnectionProcessorConfig;\nimport org.nasdanika.graph.processor.NodeProcessorConfig;\nimport org.nasdanika.graph.processor.ProcessorConfig;\nimport org.nasdanika.graph.processor.ProcessorElement;\nimport org.nasdanika.graph.processor.ProcessorInfo;\nimport org.nasdanika.http.HttpServerRouteBuilder;\n\nimport reactor.core.publisher.Mono;\nimport reactor.netty.http.server.HttpServerRoutes;\n\n/**\n * Diagram element processor which builds HTTP routes \n */\npublic class RouteBuilderProcessor implements HttpServerRouteBuilder {\n    \n    private String amount;\n    \n    @ProcessorElement\n    public void setElement(Node element) {\n        this.amount = element.getProperty(&quot;amount&quot;);\n    }\n\n    /**\n     * This is the constructor signature for graph processor classes which are to be instantiated by URIInvocableCapabilityFactory (org.nasdanika.capability.factories.URIInvocableCapabilityFactory).\n     * Config may be of specific types {@link ProcessorConfig} - {@link NodeProcessorConfig} or {@link ConnectionProcessorConfig}.  \n     * @param loader\n     * @param loaderProgressMonitor\n     * @param data\n     * @param fragment\n     * @param config\n     * @param infoProvider\n     * @param endpointWiringStageConsumer\n     * @param wiringProgressMonitor\n     */\n    public RouteBuilderProcessor(\n            Loader loader,\n            ProgressMonitor loaderProgressMonitor,\n            Object data,\n            String fragment,\n            ProcessorConfig config,\n            BiConsumer&lt;Element, BiConsumer&lt;ProcessorInfo&lt;Invocable&gt;, ProgressMonitor&gt;&gt; infoProvider,\n            Consumer&lt;CompletionStage&lt;?&gt;&gt; endpointWiringStageConsumer,\n            ProgressMonitor wiringProgressMonitor) {\n        \n    }\n\n    @Override\n    public void buildRoutes(HttpServerRoutes routes) {\n        routes.get(&quot;/balance&quot;, (request, response) -&gt; response.sendString(Mono.just(&quot;Account: &quot; + request.param(&quot;account&quot;) + &quot;, Amount: &quot; + amount)));      \n    }\n\n}\n Groovy person.groovy import reactor.core.publisher.Mono \nimport org.nasdanika.drawio.Node\nimport org.nasdanika.graph.processor.ProcessorElement\n\n//drawio test-data/drawio-http/diagram.drawio http-server --http-port=8080 processor route\nnew java.util.function.BiFunction() {\n\n    @ProcessorElement\n    public Node element;\n    \n    def apply(request, response) {\n        response.sendString(Mono.just(element.getLabel()))\n    }\n    \n}\n &lt;routeProperty&gt; Route property value is a YAML String or Map. String If the value is a String, then the value is the route path and the route method is GET. Example: /person Map If the value is a String, then the map shall contain two keys: method - one of HTTPMethod literals. path - route path Example: method: GET\npath: /person &lt;processorProperty&gt; Route serving processors shall implement BiFunction&lt;? super HttpServerRequest,? super HttpServerResponse,? extends Publisher&lt;Void&gt;&gt; to serve a single route. Processors may also implement HttpServerRouteBuilder or be adaptable to it. In this case the route property is optional and is used as a route prefix. Examples Java Single route SystemHttpHandler.java import java.util.concurrent.CompletionStage;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\nimport java.util.function.Consumer;\n\nimport org.nasdanika.capability.CapabilityFactory.Loader;\nimport org.nasdanika.common.Invocable;\nimport org.nasdanika.common.ProgressMonitor;\nimport org.nasdanika.drawio.Node;\nimport org.nasdanika.graph.Element;\nimport org.nasdanika.graph.processor.ConnectionProcessorConfig;\nimport org.nasdanika.graph.processor.NodeProcessorConfig;\nimport org.nasdanika.graph.processor.ProcessorConfig;\nimport org.nasdanika.graph.processor.ProcessorElement;\nimport org.nasdanika.graph.processor.ProcessorInfo;\nimport org.reactivestreams.Publisher;\n\nimport reactor.core.publisher.Mono;\nimport reactor.netty.http.server.HttpServerRequest;\nimport reactor.netty.http.server.HttpServerResponse;\n\n/**\n * Diagram element processor which processes HTTP requests \n */\npublic class SystemHttpHandler implements BiFunction&lt;HttpServerRequest, HttpServerResponse, Publisher&lt;Void&gt;&gt; {\n    \n    private String amount;\n    \n    @ProcessorElement\n    public void setElement(Node element) {\n        this.amount = element.getProperty(&quot;amount&quot;);\n    }\n\n    /**\n     * This is the constructor signature for graph processor classes which are to be instantiated by URIInvocableCapabilityFactory (org.nasdanika.capability.factories.URIInvocableCapabilityFactory).\n     * Config may be of specific types {@link ProcessorConfig} - {@link NodeProcessorConfig} or {@link ConnectionProcessorConfig}.  \n     * @param loader\n     * @param loaderProgressMonitor\n     * @param data\n     * @param fragment\n     * @param config\n     * @param infoProvider\n     * @param endpointWiringStageConsumer\n     * @param wiringProgressMonitor\n     */\n    public SystemHttpHandler(\n            Loader loader,\n            ProgressMonitor loaderProgressMonitor,\n            Object data,\n            String fragment,\n            ProcessorConfig config,\n            BiConsumer&lt;Element, BiConsumer&lt;ProcessorInfo&lt;Invocable&gt;, ProgressMonitor&gt;&gt; infoProvider,\n            Consumer&lt;CompletionStage&lt;?&gt;&gt; endpointWiringStageConsumer,\n            ProgressMonitor wiringProgressMonitor) {\n\n    }\n\n    @Override\n    public Publisher&lt;Void&gt; apply(HttpServerRequest request, HttpServerResponse response) {\n        return response.sendString(Mono.just(&quot;Account: &quot; + request.param(&quot;account&quot;) + &quot;, Amount: &quot; + amount));\n    }\n\n}\n Route builder RouteBuilderProcessor import java.util.concurrent.CompletionStage;\nimport java.util.function.BiConsumer;\nimport java.util.function.Consumer;\n\nimport org.nasdanika.capability.CapabilityFactory.Loader;\nimport org.nasdanika.common.Invocable;\nimport org.nasdanika.common.ProgressMonitor;\nimport org.nasdanika.drawio.Node;\nimport org.nasdanika.graph.Element;\nimport org.nasdanika.graph.processor.ConnectionProcessorConfig;\nimport org.nasdanika.graph.processor.NodeProcessorConfig;\nimport org.nasdanika.graph.processor.ProcessorConfig;\nimport org.nasdanika.graph.processor.ProcessorElement;\nimport org.nasdanika.graph.processor.ProcessorInfo;\nimport org.nasdanika.http.HttpServerRouteBuilder;\n\nimport reactor.core.publisher.Mono;\nimport reactor.netty.http.server.HttpServerRoutes;\n\n/**\n * Diagram element processor which builds HTTP routes \n */\npublic class RouteBuilderProcessor implements HttpServerRouteBuilder {\n    \n    private String amount;\n    \n    @ProcessorElement\n    public void setElement(Node element) {\n        this.amount = element.getProperty(&quot;amount&quot;);\n    }\n\n    /**\n     * This is the constructor signature for graph processor classes which are to be instantiated by URIInvocableCapabilityFactory (org.nasdanika.capability.factories.URIInvocableCapabilityFactory).\n     * Config may be of specific types {@link ProcessorConfig} - {@link NodeProcessorConfig} or {@link ConnectionProcessorConfig}.  \n     * @param loader\n     * @param loaderProgressMonitor\n     * @param data\n     * @param fragment\n     * @param config\n     * @param infoProvider\n     * @param endpointWiringStageConsumer\n     * @param wiringProgressMonitor\n     */\n    public RouteBuilderProcessor(\n            Loader loader,\n            ProgressMonitor loaderProgressMonitor,\n            Object data,\n            String fragment,\n            ProcessorConfig config,\n            BiConsumer&lt;Element, BiConsumer&lt;ProcessorInfo&lt;Invocable&gt;, ProgressMonitor&gt;&gt; infoProvider,\n            Consumer&lt;CompletionStage&lt;?&gt;&gt; endpointWiringStageConsumer,\n            ProgressMonitor wiringProgressMonitor) {\n        \n    }\n\n    @Override\n    public void buildRoutes(HttpServerRoutes routes) {\n        routes.get(&quot;/balance&quot;, (request, response) -&gt; response.sendString(Mono.just(&quot;Account: &quot; + request.param(&quot;account&quot;) + &quot;, Amount: &quot; + amount)));      \n    }\n\n}\n Groovy person.groovy import reactor.core.publisher.Mono \nimport org.nasdanika.drawio.Node\nimport org.nasdanika.graph.processor.ProcessorElement\n\n//drawio test-data/drawio-http/diagram.drawio http-server --http-port=8080 processor route\nnew java.util.function.BiFunction() {\n\n    @ProcessorElement\n    public Node element;\n    \n    def apply(request, response) {\n        response.sendString(Mono.just(element.getLabel()))\n    }\n    \n}\n &lt;routeProperty&gt; Route property value is a YAML String or Map. String If the value is a String, then the value is the route path and the route method is GET. Example: /person Map If the value is a String, then the map shall contain two keys: method - one of HTTPMethod literals. path - route path Example: method: GET\npath: /person Route serving processors shall implement BiFunction&lt;? super HttpServerRequest,? super HttpServerResponse,? extends Publisher&lt;Void&gt;&gt; to serve a single route. Processors may also implement HttpServerRouteBuilder or be adaptable to it. In this case the route property is optional and is used as a route prefix. Examples Java Single route SystemHttpHandler.java import java.util.concurrent.CompletionStage;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\nimport java.util.function.Consumer;\n\nimport org.nasdanika.capability.CapabilityFactory.Loader;\nimport org.nasdanika.common.Invocable;\nimport org.nasdanika.common.ProgressMonitor;\nimport org.nasdanika.drawio.Node;\nimport org.nasdanika.graph.Element;\nimport org.nasdanika.graph.processor.ConnectionProcessorConfig;\nimport org.nasdanika.graph.processor.NodeProcessorConfig;\nimport org.nasdanika.graph.processor.ProcessorConfig;\nimport org.nasdanika.graph.processor.ProcessorElement;\nimport org.nasdanika.graph.processor.ProcessorInfo;\nimport org.reactivestreams.Publisher;\n\nimport reactor.core.publisher.Mono;\nimport reactor.netty.http.server.HttpServerRequest;\nimport reactor.netty.http.server.HttpServerResponse;\n\n/**\n * Diagram element processor which processes HTTP requests \n */\npublic class SystemHttpHandler implements BiFunction&lt;HttpServerRequest, HttpServerResponse, Publisher&lt;Void&gt;&gt; {\n    \n    private String amount;\n    \n    @ProcessorElement\n    public void setElement(Node element) {\n        this.amount = element.getProperty(&quot;amount&quot;);\n    }\n\n    /**\n     * This is the constructor signature for graph processor classes which are to be instantiated by URIInvocableCapabilityFactory (org.nasdanika.capability.factories.URIInvocableCapabilityFactory).\n     * Config may be of specific types {@link ProcessorConfig} - {@link NodeProcessorConfig} or {@link ConnectionProcessorConfig}.  \n     * @param loader\n     * @param loaderProgressMonitor\n     * @param data\n     * @param fragment\n     * @param config\n     * @param infoProvider\n     * @param endpointWiringStageConsumer\n     * @param wiringProgressMonitor\n     */\n    public SystemHttpHandler(\n            Loader loader,\n            ProgressMonitor loaderProgressMonitor,\n            Object data,\n            String fragment,\n            ProcessorConfig config,\n            BiConsumer&lt;Element, BiConsumer&lt;ProcessorInfo&lt;Invocable&gt;, ProgressMonitor&gt;&gt; infoProvider,\n            Consumer&lt;CompletionStage&lt;?&gt;&gt; endpointWiringStageConsumer,\n            ProgressMonitor wiringProgressMonitor) {\n\n    }\n\n    @Override\n    public Publisher&lt;Void&gt; apply(HttpServerRequest request, HttpServerResponse response) {\n        return response.sendString(Mono.just(&quot;Account: &quot; + request.param(&quot;account&quot;) + &quot;, Amount: &quot; + amount));\n    }\n\n}\n Route builder RouteBuilderProcessor import java.util.concurrent.CompletionStage;\nimport java.util.function.BiConsumer;\nimport java.util.function.Consumer;\n\nimport org.nasdanika.capability.CapabilityFactory.Loader;\nimport org.nasdanika.common.Invocable;\nimport org.nasdanika.common.ProgressMonitor;\nimport org.nasdanika.drawio.Node;\nimport org.nasdanika.graph.Element;\nimport org.nasdanika.graph.processor.ConnectionProcessorConfig;\nimport org.nasdanika.graph.processor.NodeProcessorConfig;\nimport org.nasdanika.graph.processor.ProcessorConfig;\nimport org.nasdanika.graph.processor.ProcessorElement;\nimport org.nasdanika.graph.processor.ProcessorInfo;\nimport org.nasdanika.http.HttpServerRouteBuilder;\n\nimport reactor.core.publisher.Mono;\nimport reactor.netty.http.server.HttpServerRoutes;\n\n/**\n * Diagram element processor which builds HTTP routes \n */\npublic class RouteBuilderProcessor implements HttpServerRouteBuilder {\n    \n    private String amount;\n    \n    @ProcessorElement\n    public void setElement(Node element) {\n        this.amount = element.getProperty(&quot;amount&quot;);\n    }\n\n    /**\n     * This is the constructor signature for graph processor classes which are to be instantiated by URIInvocableCapabilityFactory (org.nasdanika.capability.factories.URIInvocableCapabilityFactory).\n     * Config may be of specific types {@link ProcessorConfig} - {@link NodeProcessorConfig} or {@link ConnectionProcessorConfig}.  \n     * @param loader\n     * @param loaderProgressMonitor\n     * @param data\n     * @param fragment\n     * @param config\n     * @param infoProvider\n     * @param endpointWiringStageConsumer\n     * @param wiringProgressMonitor\n     */\n    public RouteBuilderProcessor(\n            Loader loader,\n            ProgressMonitor loaderProgressMonitor,\n            Object data,\n            String fragment,\n            ProcessorConfig config,\n            BiConsumer&lt;Element, BiConsumer&lt;ProcessorInfo&lt;Invocable&gt;, ProgressMonitor&gt;&gt; infoProvider,\n            Consumer&lt;CompletionStage&lt;?&gt;&gt; endpointWiringStageConsumer,\n            ProgressMonitor wiringProgressMonitor) {\n        \n    }\n\n    @Override\n    public void buildRoutes(HttpServerRoutes routes) {\n        routes.get(&quot;/balance&quot;, (request, response) -&gt; response.sendString(Mono.just(&quot;Account: &quot; + request.param(&quot;account&quot;) + &quot;, Amount: &quot; + amount)));      \n    }\n\n}\n Groovy person.groovy import reactor.core.publisher.Mono \nimport org.nasdanika.drawio.Node\nimport org.nasdanika.graph.processor.ProcessorElement\n\n//drawio test-data/drawio-http/diagram.drawio http-server --http-port=8080 processor route\nnew java.util.function.BiFunction() {\n\n    @ProcessorElement\n    public Node element;\n    \n    def apply(request, response) {\n        response.sendString(Mono.just(element.getLabel()))\n    }\n    \n} Route property value is a YAML String or Map. String If the value is a String, then the value is the route path and the route method is GET. Example: /person Map If the value is a String, then the map shall contain two keys: method - one of HTTPMethod literals. path - route path Example: method: GET\npath: /person"},"java/junit/index.html":{"path":"java/junit","link-uuid":"4c14b0ec-797a-42c9-b6b7-9ba137898aa4","title":"junit","content":"Version: org.nasdanika.models.java.cli Usage: nsd java junit [-fhVw] [--[no-]ai] [--[no-]comment-response] [--disabled] [--progress-console] [--progress-data] [--progress-json] [--api-endpoint=&lt;apiEndpoint&gt;] [--class-suffix=&lt;classSuffix&gt;] [-k=&lt;apiKey&gt;] [-l=&lt;limit&gt;] [-m=&lt;deploymentOrModelName&gt;] [--package-suffix=&lt;packageSuffix&gt;] [--progress-output=&lt;progressOutput&gt;] [-r=&lt;prompt&gt;] [-s=&lt;sources&gt;] [-t=&lt;coverageType&gt;] [-v=&lt;apiKeyEnvironmentVariable&gt;] [-e[=&lt;excludes&gt;...]]... [-i[=&lt;includes&gt;...]]... &lt;projectURI&gt; &lt;coverageThreshold&gt; &lt;output&gt; [COMMAND] Generates JUnit tests &lt;projectURI&gt; Project URI &lt;coverageThreshold&gt; Coverage threshold &lt;output&gt; Output URI relative to the project URI --[no-]ai Use AI, defaults to true --api-endpoint=&lt;apiEndpoint&gt; OpenAPI endpoint, defaults to https://api.openai.com/v1/chat/completions --class-suffix=&lt;classSuffix&gt; Test class suffix defaults to Tests --[no-]comment-response Comment AI responses defaults to true --disabled Generate disabled tests -e, --exclude[=&lt;excludes&gt;...] Source excludes Ant pattern -f Project URI is a file path -h, --help Show this help message and exit. -i, --include[=&lt;includes&gt;...] Source includes Ant pattern -k, --api-key=&lt;apiKey&gt; OpenAPI key -l, --limit=&lt;limit&gt; Maximum number of test classes to generate -m, --model=&lt;deploymentOrModelName&gt; OpenAPI deployment or model defaults to gpt-4 --package-suffix=&lt;packageSuffix&gt; Test package suffix defaults to .tests --progress-console Output progress to console --progress-data Output progress data --progress-json Output progress in JSON --progress-output=&lt;progressOutput&gt; Output file for progress monitor -r, --prompt=&lt;prompt&gt; Propmt defaults to 'Generate a JUnit 5 test method leveraging Mockito for the following Java method' -s, --sources=&lt;sources&gt; Sources URI path relative to the project URIy, defaults to src/main/java -t, --coverage-type=&lt;coverageType&gt; Coverage type Valid values: complexity, instruction, branch, line defaults to line -v, --api-key-variable=&lt;apiKeyEnvironmentVariable&gt; OpenAPI key environment variable defaults to OPENAI_API_KEY -V, --version Print version information and exit. -w, --overwrite Overwrite existing tests Commands: jacoco - Loads coverage from jacoco.exec and classes directory"}}